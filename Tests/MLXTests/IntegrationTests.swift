// Copyright Â© 2024 Apple Inc.

import Foundation
import MLX
import MLXFFT
import MLXNN
import MLXRandom
import XCTest

@testable import MLXOptimizers

/// Integration tests comparing results vs known results from python
/// integration.  Generated by `tools/generate_integration_tests.py`.
///
/// Note: this is not meant to be complete coverage, merely a sanity
/// check that the wrapping of the c++ core matches python (e.g. calls
/// the same functions).
class MLXIntegrationTests: XCTestCase {

    override class func setUp() {
        setDefaultDevice()
    }

    func testRandomSeed() {
        MLXRandom.seed(864)
        let r = MLXRandom.normal()
        XCTAssertEqual(
            r.item(Float.self), 1.3235496282577515,
            accuracy: 0.001)

    }

    func testAddOp() {
        MLXRandom.seed(394)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.17949937283992767,
            accuracy: -0.0035899874567985536)
        XCTAssertEqual(
            a.sum().item(Float.self), -2.1539924144744873,
            accuracy: -0.04307984828948975)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(
            b.mean().item(Float.self), 0.12489726394414902,
            accuracy: 0.00249794527888298)
        XCTAssertEqual(
            b.sum().item(Float.self), 1.4987671375274658,
            accuracy: 0.029975342750549316)
        let result = a + b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.05460209771990776,
            accuracy: -0.0010920419543981553)
        XCTAssertEqual(
            result.sum().item(Float.self), -0.6552251577377319,
            accuracy: -0.01310450315475464)
    }

    func testAddOp1() {
        MLXRandom.seed(776)
        let a = 0.5
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(
            b.mean().item(Float.self), 0.1590166687965393,
            accuracy: 0.003180333375930786)
        XCTAssertEqual(
            b.sum().item(Float.self), 1.9082000255584717,
            accuracy: 0.03816400051116944)
        let result = a + b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.6590167284011841,
            accuracy: 0.013180334568023682)
        XCTAssertEqual(
            result.sum().item(Float.self), 7.908200263977051,
            accuracy: 0.15816400527954103)
    }

    func testAddOp2() {
        MLXRandom.seed(911)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.523838222026825,
            accuracy: 0.0104767644405365)
        XCTAssertEqual(
            a.sum().item(Float.self), 6.28605842590332,
            accuracy: 0.12572116851806642)
        let b = 1.3
        let result = a + b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 1.8238381147384644,
            accuracy: 0.03647676229476929)
        XCTAssertEqual(
            result.sum().item(Float.self), 21.886056900024414,
            accuracy: 0.4377211380004883)
    }

    func testSubOp() {
        MLXRandom.seed(430)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.05095359683036804,
            accuracy: 0.0010190719366073608)
        XCTAssertEqual(
            a.sum().item(Float.self), 0.6114431619644165,
            accuracy: 0.01222886323928833)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(
            b.mean().item(Float.self), 0.13153076171875,
            accuracy: 0.002630615234375)
        XCTAssertEqual(
            b.sum().item(Float.self), 1.5783690214157104,
            accuracy: 0.03156738042831421)
        let result = a - b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.08057717978954315,
            accuracy: -0.001611543595790863)
        XCTAssertEqual(
            result.sum().item(Float.self), -0.966926097869873,
            accuracy: -0.01933852195739746)
    }

    func testSubOp1() {
        MLXRandom.seed(41)
        let a = 0.5
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(
            b.mean().item(Float.self), -0.27060821652412415,
            accuracy: -0.005412164330482483)
        XCTAssertEqual(
            b.sum().item(Float.self), -3.2472984790802,
            accuracy: -0.06494596958160401)
        let result = a - b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.7706083059310913,
            accuracy: 0.015412166118621827)
        XCTAssertEqual(
            result.sum().item(Float.self), 9.247299194335938,
            accuracy: 0.18494598388671876)
    }

    func testSubOp2() {
        MLXRandom.seed(265)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.18188762664794922,
            accuracy: 0.0036377525329589844)
        XCTAssertEqual(
            a.sum().item(Float.self), 2.1826515197753906,
            accuracy: 0.043653030395507816)
        let b = 1.3
        let result = a - b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -1.118112325668335,
            accuracy: -0.0223622465133667)
        XCTAssertEqual(
            result.sum().item(Float.self), -13.417346954345703,
            accuracy: -0.2683469390869141)
    }

    func testMulOp() {
        MLXRandom.seed(988)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.03418738767504692,
            accuracy: 0.0006837477535009385)
        XCTAssertEqual(
            a.sum().item(Float.self), 0.41024863719940186,
            accuracy: 0.008204972743988037)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(
            b.mean().item(Float.self), 0.841292142868042,
            accuracy: 0.01682584285736084)
        XCTAssertEqual(
            b.sum().item(Float.self), 10.095505714416504,
            accuracy: 0.20191011428833008)
        let result = a * b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.44235628843307495,
            accuracy: 0.0088471257686615)
        XCTAssertEqual(
            result.sum().item(Float.self), 5.30827522277832,
            accuracy: 0.10616550445556641)
    }

    func testMulOp1() {
        MLXRandom.seed(523)
        let a = 0.5
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(
            b.mean().item(Float.self), 0.112852081656456,
            accuracy: 0.00225704163312912)
        XCTAssertEqual(
            b.sum().item(Float.self), 1.3542249202728271,
            accuracy: 0.027084498405456542)
        let result = a * b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.056426040828228,
            accuracy: 0.00112852081656456)
        XCTAssertEqual(
            result.sum().item(Float.self), 0.6771124601364136,
            accuracy: 0.013542249202728271)
    }

    func testMulOp2() {
        MLXRandom.seed(497)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.24078607559204102,
            accuracy: -0.004815721511840821)
        XCTAssertEqual(
            a.sum().item(Float.self), -2.889432907104492,
            accuracy: -0.057788658142089847)
        let b = 1.3
        let result = a * b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.3130219280719757,
            accuracy: -0.006260438561439514)
        XCTAssertEqual(
            result.sum().item(Float.self), -3.756263017654419,
            accuracy: -0.07512526035308838)
    }

    func testDivOp() {
        MLXRandom.seed(414)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.12723450362682343,
            accuracy: -0.0025446900725364686)
        XCTAssertEqual(
            a.sum().item(Float.self), -1.5268139839172363,
            accuracy: -0.030536279678344727)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(
            b.mean().item(Float.self), -0.47808408737182617,
            accuracy: -0.009561681747436523)
        XCTAssertEqual(
            b.sum().item(Float.self), -5.737009048461914,
            accuracy: -0.11474018096923828)
        let result = a / b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 2.7393910884857178,
            accuracy: 0.054787821769714355)
        XCTAssertEqual(
            result.sum().item(Float.self), 32.8726921081543,
            accuracy: 0.657453842163086)
    }

    func testDivOp1() {
        MLXRandom.seed(940)
        let a = 0.5
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(
            b.mean().item(Float.self), -0.3181919455528259,
            accuracy: -0.0063638389110565186)
        XCTAssertEqual(
            b.sum().item(Float.self), -3.818303346633911,
            accuracy: -0.07636606693267822)
        let result = a / b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.33945927023887634,
            accuracy: -0.006789185404777527)
        XCTAssertEqual(
            result.sum().item(Float.self), -4.073511123657227,
            accuracy: -0.08147022247314453)
    }

    func testDivOp2() {
        MLXRandom.seed(802)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.08001989126205444,
            accuracy: 0.001600397825241089)
        XCTAssertEqual(
            a.sum().item(Float.self), 0.9602386951446533,
            accuracy: 0.019204773902893067)
        let b = 1.3
        let result = a / b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.06155376881361008,
            accuracy: 0.0012310753762722016)
        XCTAssertEqual(
            result.sum().item(Float.self), 0.7386451959609985,
            accuracy: 0.014772903919219971)
    }

    func testModOp() {
        MLXRandom.seed(849)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.5959362983703613,
            accuracy: -0.011918725967407227)
        XCTAssertEqual(
            a.sum().item(Float.self), -7.151235103607178,
            accuracy: -0.14302470207214354)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(
            b.mean().item(Float.self), 0.42154282331466675,
            accuracy: 0.008430856466293336)
        XCTAssertEqual(
            b.sum().item(Float.self), 5.058513641357422,
            accuracy: 0.10117027282714844)
        let result = a % b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.28858500719070435,
            accuracy: 0.005771700143814087)
        XCTAssertEqual(
            result.sum().item(Float.self), 3.463019847869873,
            accuracy: 0.06926039695739747)
    }

    func testModOp1() {
        MLXRandom.seed(310)
        let a = 0.5
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(
            b.mean().item(Float.self), 0.15466859936714172,
            accuracy: 0.0030933719873428344)
        XCTAssertEqual(
            b.sum().item(Float.self), 1.8560230731964111,
            accuracy: 0.03712046146392822)
        let result = a % b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.029992982745170593,
            accuracy: -0.0005998596549034119)
        XCTAssertEqual(
            result.sum().item(Float.self), -0.3599157929420471,
            accuracy: -0.007198315858840942)
    }

    func testModOp2() {
        MLXRandom.seed(991)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.34309279918670654,
            accuracy: -0.006861855983734131)
        XCTAssertEqual(
            a.sum().item(Float.self), -4.1171135902404785,
            accuracy: -0.08234227180480957)
        let b = 1.3
        let result = a % b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.6319072246551514,
            accuracy: 0.012638144493103028)
        XCTAssertEqual(
            result.sum().item(Float.self), 7.582886219024658,
            accuracy: 0.15165772438049316)
    }

    func testPowOp() {
        MLXRandom.seed(488)
        let a = MLXRandom.uniform(low: 0.1, high: 2.0, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.8261654376983643,
            accuracy: 0.016523308753967285)
        XCTAssertEqual(
            a.sum().item(Float.self), 9.913985252380371,
            accuracy: 0.19827970504760742)
        let b = MLXRandom.uniform(low: 0.1, high: 2.0, [4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(
            b.mean().item(Float.self), 1.3262829780578613,
            accuracy: 0.02652565956115723)
        XCTAssertEqual(
            b.sum().item(Float.self), 15.915395736694336,
            accuracy: 0.3183079147338867)
        let result = a ** b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.8045400381088257,
            accuracy: 0.016090800762176515)
        XCTAssertEqual(
            result.sum().item(Float.self), 9.65447998046875,
            accuracy: 0.193089599609375)
    }

    func testPowOp1() {
        MLXRandom.seed(366)
        let a = MLXRandom.uniform(low: 0.1, high: 2.0, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.9292365908622742,
            accuracy: 0.018584731817245483)
        XCTAssertEqual(
            a.sum().item(Float.self), 11.150838851928711,
            accuracy: 0.22301677703857423)
        let b = 1.3
        let result = a ** b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.9557135105133057,
            accuracy: 0.019114270210266113)
        XCTAssertEqual(
            result.sum().item(Float.self), 11.468562126159668,
            accuracy: 0.22937124252319335)
    }

    func testEqualOp() {
        MLXRandom.seed(597)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.268618643283844,
            accuracy: -0.00537237286567688)
        XCTAssertEqual(
            a.sum().item(Float.self), -3.223423480987549,
            accuracy: -0.06446846961975097)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(
            b.mean().item(Float.self), -0.002711281180381775,
            accuracy: -5.42256236076355e-05)
        XCTAssertEqual(
            b.sum().item(Float.self), -0.0325353741645813,
            accuracy: -0.000650707483291626)
        let result = a .== b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), false)
        XCTAssertEqual(result.any().item(), false)
    }

    func testEqualOp1() {
        MLXRandom.seed(913)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.040915559977293015,
            accuracy: 0.0008183111995458603)
        XCTAssertEqual(
            a.sum().item(Float.self), 0.490986704826355,
            accuracy: 0.0098197340965271)
        let b = 1.3
        let result = a .== b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), false)
        XCTAssertEqual(result.any().item(), false)
    }

    func testNotEqualOp() {
        MLXRandom.seed(929)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.2947184443473816,
            accuracy: -0.005894368886947632)
        XCTAssertEqual(
            a.sum().item(Float.self), -3.536621332168579,
            accuracy: -0.07073242664337158)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(
            b.mean().item(Float.self), -0.009182363748550415,
            accuracy: -0.0001836472749710083)
        XCTAssertEqual(
            b.sum().item(Float.self), -0.11018836498260498,
            accuracy: -0.0022037672996520997)
        let result = a .!= b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), true)
        XCTAssertEqual(result.any().item(), true)
    }

    func testNotEqualOp1() {
        MLXRandom.seed(223)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.009602058678865433,
            accuracy: -0.00019204117357730867)
        XCTAssertEqual(
            a.sum().item(Float.self), -0.11522470414638519,
            accuracy: -0.002304494082927704)
        let b = 1.3
        let result = a .!= b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), true)
        XCTAssertEqual(result.any().item(), true)
    }

    func testLessThanOp() {
        MLXRandom.seed(516)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.671758770942688,
            accuracy: 0.01343517541885376)
        XCTAssertEqual(
            a.sum().item(Float.self), 8.061104774475098,
            accuracy: 0.16122209548950195)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(
            b.mean().item(Float.self), -0.04753169044852257,
            accuracy: -0.0009506338089704514)
        XCTAssertEqual(
            b.sum().item(Float.self), -0.5703802704811096,
            accuracy: -0.011407605409622193)
        let result = a .< b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), false)
        XCTAssertEqual(result.any().item(), true)
    }

    func testLessThanOp1() {
        MLXRandom.seed(142)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.21625718474388123,
            accuracy: 0.004325143694877624)
        XCTAssertEqual(
            a.sum().item(Float.self), 2.595086097717285,
            accuracy: 0.051901721954345705)
        let b = 1.3
        let result = a .< b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), false)
        XCTAssertEqual(result.any().item(), true)
    }

    func testLessThanEqualOp() {
        MLXRandom.seed(288)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.19039803743362427,
            accuracy: -0.0038079607486724855)
        XCTAssertEqual(
            a.sum().item(Float.self), -2.284776449203491,
            accuracy: -0.045695528984069825)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(
            b.mean().item(Float.self), 0.10338123887777328,
            accuracy: 0.002067624777555466)
        XCTAssertEqual(
            b.sum().item(Float.self), 1.240574836730957,
            accuracy: 0.024811496734619142)
        let result = a .<= b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), false)
        XCTAssertEqual(result.any().item(), true)
    }

    func testLessThanEqualOp1() {
        MLXRandom.seed(143)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.025643646717071533,
            accuracy: -0.0005128729343414307)
        XCTAssertEqual(
            a.sum().item(Float.self), -0.3077237606048584,
            accuracy: -0.006154475212097168)
        let b = 1.3
        let result = a .<= b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), true)
        XCTAssertEqual(result.any().item(), true)
    }

    func testGreaterThanOp() {
        MLXRandom.seed(773)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.18657740950584412,
            accuracy: -0.003731548190116882)
        XCTAssertEqual(
            a.sum().item(Float.self), -2.23892879486084,
            accuracy: -0.044778575897216795)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(
            b.mean().item(Float.self), 0.0327937975525856,
            accuracy: 0.0006558759510517121)
        XCTAssertEqual(
            b.sum().item(Float.self), 0.39352554082870483,
            accuracy: 0.007870510816574097)
        let result = a .> b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), false)
        XCTAssertEqual(result.any().item(), true)
    }

    func testGreaterThanOp1() {
        MLXRandom.seed(97)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.04777970910072327,
            accuracy: -0.0009555941820144654)
        XCTAssertEqual(
            a.sum().item(Float.self), -0.5733565092086792,
            accuracy: -0.011467130184173583)
        let b = 1.3
        let result = a .> b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), false)
        XCTAssertEqual(result.any().item(), false)
    }

    func testGreaterThanEqualOp() {
        MLXRandom.seed(633)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.17345473170280457,
            accuracy: 0.0034690946340560913)
        XCTAssertEqual(
            a.sum().item(Float.self), 2.0814566612243652,
            accuracy: 0.0416291332244873)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(
            b.mean().item(Float.self), 0.2481841742992401,
            accuracy: 0.004963683485984803)
        XCTAssertEqual(
            b.sum().item(Float.self), 2.978209972381592,
            accuracy: 0.05956419944763184)
        let result = a .>= b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), false)
        XCTAssertEqual(result.any().item(), true)
    }

    func testGreaterThanEqualOp1() {
        MLXRandom.seed(818)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.01743374764919281,
            accuracy: -0.0003486749529838562)
        XCTAssertEqual(
            a.sum().item(Float.self), -0.20920497179031372,
            accuracy: -0.004184099435806275)
        let b = 1.3
        let result = a .>= b
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), false)
        XCTAssertEqual(result.any().item(), false)
    }

    func testAbs() {
        MLXRandom.seed(256)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.15743832290172577,
            accuracy: -0.0031487664580345156)
        XCTAssertEqual(
            a.sum().item(Float.self), -1.8892598152160645,
            accuracy: -0.03778519630432129)
        let result = a.abs()
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.8130466341972351,
            accuracy: 0.0162609326839447)
        XCTAssertEqual(
            result.sum().item(Float.self), 9.756559371948242,
            accuracy: 0.19513118743896485)
    }

    func testAbs1() {
        MLXRandom.seed(931)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.22450898587703705,
            accuracy: -0.004490179717540741)
        XCTAssertEqual(
            a.sum().item(Float.self), -2.6941077709198,
            accuracy: -0.053882155418396)
        let result = abs(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.6981315016746521,
            accuracy: 0.013962630033493042)
        XCTAssertEqual(
            result.sum().item(Float.self), 8.377577781677246,
            accuracy: 0.16755155563354493)
    }

    func testAll() {
        MLXRandom.seed(545)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.05837365239858627,
            accuracy: 0.0011674730479717256)
        XCTAssertEqual(
            a.sum().item(Float.self), 0.7004837989807129,
            accuracy: 0.014009675979614259)
        let result = a.all()
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), true)
        XCTAssertEqual(result.any().item(), true)
    }

    func testAll1() {
        MLXRandom.seed(722)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.01978858932852745,
            accuracy: -0.00039577178657054904)
        XCTAssertEqual(
            a.sum().item(Float.self), -0.2374630719423294,
            accuracy: -0.004749261438846588)
        let result = all(a)
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), true)
        XCTAssertEqual(result.any().item(), true)
    }

    func testAll2() {
        MLXRandom.seed(829)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.03525291010737419,
            accuracy: 0.0007050582021474838)
        XCTAssertEqual(
            a.sum().item(Float.self), 0.4230349063873291,
            accuracy: 0.008460698127746582)
        let result = a.all(axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), true)
        XCTAssertEqual(result.any().item(), true)
    }

    func testAll3() {
        MLXRandom.seed(616)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.1122930571436882,
            accuracy: 0.002245861142873764)
        XCTAssertEqual(
            a.sum().item(Float.self), 1.347516655921936,
            accuracy: 0.02695033311843872)
        let result = all(a, axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), true)
        XCTAssertEqual(result.any().item(), true)
    }

    func testAll4() {
        MLXRandom.seed(923)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.4720103442668915,
            accuracy: 0.00944020688533783)
        XCTAssertEqual(
            a.sum().item(Float.self), 33.984745025634766,
            accuracy: 0.6796949005126953)
        let result = a.all(axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), true)
        XCTAssertEqual(result.any().item(), true)
    }

    func testAll5() {
        MLXRandom.seed(150)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.4883745014667511,
            accuracy: 0.009767490029335022)
        XCTAssertEqual(
            a.sum().item(Float.self), 35.1629638671875,
            accuracy: 0.70325927734375)
        let result = all(a, axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), true)
        XCTAssertEqual(result.any().item(), true)
    }

    func testAny() {
        MLXRandom.seed(317)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.1289883852005005,
            accuracy: -0.0025797677040100097)
        XCTAssertEqual(
            a.sum().item(Float.self), -1.5478605031967163,
            accuracy: -0.030957210063934325)
        let result = a.any()
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), true)
        XCTAssertEqual(result.any().item(), true)
    }

    func testAny1() {
        MLXRandom.seed(101)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.08150328695774078,
            accuracy: -0.0016300657391548157)
        XCTAssertEqual(
            a.sum().item(Float.self), -0.9780394434928894,
            accuracy: -0.01956078886985779)
        let result = any(a)
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), true)
        XCTAssertEqual(result.any().item(), true)
    }

    func testAny2() {
        MLXRandom.seed(747)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.23745165765285492,
            accuracy: 0.004749033153057099)
        XCTAssertEqual(
            a.sum().item(Float.self), 2.8494198322296143,
            accuracy: 0.056988396644592286)
        let result = a.any(axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), true)
        XCTAssertEqual(result.any().item(), true)
    }

    func testAny3() {
        MLXRandom.seed(75)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.3039236068725586,
            accuracy: -0.006078472137451172)
        XCTAssertEqual(
            a.sum().item(Float.self), -3.647083282470703,
            accuracy: -0.07294166564941407)
        let result = any(a, axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), true)
        XCTAssertEqual(result.any().item(), true)
    }

    func testAny4() {
        MLXRandom.seed(920)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.41749411821365356,
            accuracy: 0.008349882364273071)
        XCTAssertEqual(
            a.sum().item(Float.self), 30.0595760345459,
            accuracy: 0.601191520690918)
        let result = a.any(axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), true)
        XCTAssertEqual(result.any().item(), true)
    }

    func testAny5() {
        MLXRandom.seed(870)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.5518582463264465,
            accuracy: 0.01103716492652893)
        XCTAssertEqual(
            a.sum().item(Float.self), 39.73379135131836,
            accuracy: 0.7946758270263672)
        let result = any(a, axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), true)
        XCTAssertEqual(result.any().item(), true)
    }

    func testArgMax() {
        MLXRandom.seed(700)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.20903855562210083,
            accuracy: -0.004180771112442016)
        XCTAssertEqual(
            a.sum().item(Float.self), -2.50846266746521,
            accuracy: -0.0501692533493042)
        let result = a.argMax()
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .uint32)
        XCTAssertEqual(
            result.mean().item(Float.self), 8.0,
            accuracy: 0.16)
        XCTAssertEqual(
            result.sum().item(Float.self), 8,
            accuracy: 0.16)
    }

    func testArgMax1() {
        MLXRandom.seed(338)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.07185819745063782,
            accuracy: 0.0014371639490127564)
        XCTAssertEqual(
            a.sum().item(Float.self), 0.8622983694076538,
            accuracy: 0.017245967388153077)
        let result = argMax(a)
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .uint32)
        XCTAssertEqual(
            result.mean().item(Float.self), 7.0,
            accuracy: 0.14)
        XCTAssertEqual(
            result.sum().item(Float.self), 7,
            accuracy: 0.14)
    }

    func testArgMax2() {
        MLXRandom.seed(483)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.0843842476606369,
            accuracy: 0.001687684953212738)
        XCTAssertEqual(
            a.sum().item(Float.self), 1.012610912322998,
            accuracy: 0.020252218246459962)
        let result = a.argMax(axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .uint32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.75,
            accuracy: 0.015)
        XCTAssertEqual(
            result.sum().item(Float.self), 3,
            accuracy: 0.06)
    }

    func testArgMax3() {
        MLXRandom.seed(573)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.5405035018920898,
            accuracy: 0.010810070037841797)
        XCTAssertEqual(
            a.sum().item(Float.self), 6.48604154586792,
            accuracy: 0.1297208309173584)
        let result = argMax(a, axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .uint32)
        XCTAssertEqual(
            result.mean().item(Float.self), 1.25,
            accuracy: 0.025)
        XCTAssertEqual(
            result.sum().item(Float.self), 5,
            accuracy: 0.1)
    }

    func testArgMin() {
        MLXRandom.seed(103)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.2983229458332062,
            accuracy: 0.005966458916664124)
        XCTAssertEqual(
            a.sum().item(Float.self), 3.5798752307891846,
            accuracy: 0.0715975046157837)
        let result = a.argMin()
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .uint32)
        XCTAssertEqual(
            result.mean().item(Float.self), 11.0,
            accuracy: 0.22)
        XCTAssertEqual(
            result.sum().item(Float.self), 11,
            accuracy: 0.22)
    }

    func testArgMin1() {
        MLXRandom.seed(362)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.057320237159729004,
            accuracy: -0.00114640474319458)
        XCTAssertEqual(
            a.sum().item(Float.self), -0.687842845916748,
            accuracy: -0.013756856918334961)
        let result = argMin(a)
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .uint32)
        XCTAssertEqual(
            result.mean().item(Float.self), 8.0,
            accuracy: 0.16)
        XCTAssertEqual(
            result.sum().item(Float.self), 8,
            accuracy: 0.16)
    }

    func testArgMin2() {
        MLXRandom.seed(444)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.22760924696922302,
            accuracy: 0.004552184939384461)
        XCTAssertEqual(
            a.sum().item(Float.self), 2.7313108444213867,
            accuracy: 0.05462621688842773)
        let result = a.argMin(axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .uint32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.25,
            accuracy: 0.005)
        XCTAssertEqual(
            result.sum().item(Float.self), 1,
            accuracy: 0.02)
    }

    func testArgMin3() {
        MLXRandom.seed(323)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.4485395550727844,
            accuracy: -0.008970791101455688)
        XCTAssertEqual(
            a.sum().item(Float.self), -5.382474422454834,
            accuracy: -0.10764948844909668)
        let result = argMin(a, axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .uint32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.5,
            accuracy: 0.01)
        XCTAssertEqual(
            result.sum().item(Float.self), 2,
            accuracy: 0.04)
    }

    func testCummax() {
        MLXRandom.seed(625)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.2803424596786499,
            accuracy: -0.0056068491935729985)
        XCTAssertEqual(
            a.sum().item(Float.self), -3.3641092777252197,
            accuracy: -0.0672821855545044)
        let result = a.cummax()
        XCTAssertEqual(result.shape, [12])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.3141178786754608,
            accuracy: 0.006282357573509216)
        XCTAssertEqual(
            result.sum().item(Float.self), 3.7694144248962402,
            accuracy: 0.07538828849792481)
    }

    func testCummax1() {
        MLXRandom.seed(655)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.37031763792037964,
            accuracy: 0.0074063527584075925)
        XCTAssertEqual(
            a.sum().item(Float.self), 4.443811416625977,
            accuracy: 0.08887622833251953)
        let result = cummax(a)
        XCTAssertEqual(result.shape, [12])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 1.3793113231658936,
            accuracy: 0.027586226463317872)
        XCTAssertEqual(
            result.sum().item(Float.self), 16.551734924316406,
            accuracy: 0.3310346984863281)
    }

    func testCummax2() {
        MLXRandom.seed(934)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.05676526948809624,
            accuracy: -0.0011353053897619249)
        XCTAssertEqual(
            a.sum().item(Float.self), -0.6811832189559937,
            accuracy: -0.013623664379119873)
        let result = a.cummax(axis: -1)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.018919458612799644,
            accuracy: 0.0003783891722559929)
        XCTAssertEqual(
            result.sum().item(Float.self), 0.22703349590301514,
            accuracy: 0.004540669918060303)
    }

    func testCummax3() {
        MLXRandom.seed(209)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.07204179465770721,
            accuracy: 0.0014408358931541443)
        XCTAssertEqual(
            a.sum().item(Float.self), 0.8645014762878418,
            accuracy: 0.017290029525756836)
        let result = cummax(a, axis: -1)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 1.061327576637268,
            accuracy: 0.02122655153274536)
        XCTAssertEqual(
            result.sum().item(Float.self), 12.735930442810059,
            accuracy: 0.2547186088562012)
    }

    func testCummin() {
        MLXRandom.seed(989)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.16920256614685059,
            accuracy: -0.0033840513229370117)
        XCTAssertEqual(
            a.sum().item(Float.self), -2.030430793762207,
            accuracy: -0.04060861587524414)
        let result = a.cummin()
        XCTAssertEqual(result.shape, [12])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.9566025733947754,
            accuracy: -0.019132051467895508)
        XCTAssertEqual(
            result.sum().item(Float.self), -11.479230880737305,
            accuracy: -0.2295846176147461)
    }

    func testCummin1() {
        MLXRandom.seed(565)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.644216775894165,
            accuracy: -0.0128843355178833)
        XCTAssertEqual(
            a.sum().item(Float.self), -7.7306013107299805,
            accuracy: -0.1546120262145996)
        let result = cummin(a)
        XCTAssertEqual(result.shape, [12])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -1.7292345762252808,
            accuracy: -0.03458469152450561)
        XCTAssertEqual(
            result.sum().item(Float.self), -20.75081443786621,
            accuracy: -0.4150162887573242)
    }

    func testCummin2() {
        MLXRandom.seed(488)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.398279070854187,
            accuracy: -0.00796558141708374)
        XCTAssertEqual(
            a.sum().item(Float.self), -4.779348850250244,
            accuracy: -0.09558697700500489)
        let result = a.cummin(axis: -1)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.9816936254501343,
            accuracy: -0.019633872509002687)
        XCTAssertEqual(
            result.sum().item(Float.self), -11.780323028564453,
            accuracy: -0.23560646057128906)
    }

    func testCummin3() {
        MLXRandom.seed(453)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.0004353722033556551,
            accuracy: 8.707444067113101e-06)
        XCTAssertEqual(
            a.sum().item(Float.self), 0.005224466323852539,
            accuracy: 0.00010448932647705078)
        let result = cummin(a, axis: -1)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.4506932497024536,
            accuracy: -0.009013864994049072)
        XCTAssertEqual(
            result.sum().item(Float.self), -5.408318996429443,
            accuracy: -0.10816637992858887)
    }

    func testCumprod() {
        MLXRandom.seed(886)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.0051885247230529785,
            accuracy: -0.00010377049446105957)
        XCTAssertEqual(
            a.sum().item(Float.self), -0.06226229667663574,
            accuracy: -0.001245245933532715)
        let result = a.cumprod()
        XCTAssertEqual(result.shape, [12])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.14253053069114685,
            accuracy: 0.002850610613822937)
        XCTAssertEqual(
            result.sum().item(Float.self), 1.7103662490844727,
            accuracy: 0.034207324981689456)
    }

    func testCumprod1() {
        MLXRandom.seed(533)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.12974336743354797,
            accuracy: -0.0025948673486709596)
        XCTAssertEqual(
            a.sum().item(Float.self), -1.5569202899932861,
            accuracy: -0.031138405799865723)
        let result = cumprod(a)
        XCTAssertEqual(result.shape, [12])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.020257528871297836,
            accuracy: 0.0004051505774259567)
        XCTAssertEqual(
            result.sum().item(Float.self), 0.24309033155441284,
            accuracy: 0.004861806631088257)
    }

    func testCumprod2() {
        MLXRandom.seed(266)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.20902606844902039,
            accuracy: 0.004180521368980407)
        XCTAssertEqual(
            a.sum().item(Float.self), 2.508312702178955,
            accuracy: 0.050166254043579106)
        let result = a.cumprod(axis: -1)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.7459201812744141,
            accuracy: 0.014918403625488281)
        XCTAssertEqual(
            result.sum().item(Float.self), 8.951042175292969,
            accuracy: 0.17902084350585937)
    }

    func testCumprod3() {
        MLXRandom.seed(63)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.20442306995391846,
            accuracy: 0.004088461399078369)
        XCTAssertEqual(
            a.sum().item(Float.self), 2.4530768394470215,
            accuracy: 0.04906153678894043)
        let result = cumprod(a, axis: -1)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.20277641713619232,
            accuracy: 0.004055528342723847)
        XCTAssertEqual(
            result.sum().item(Float.self), 2.433316946029663,
            accuracy: 0.048666338920593265)
    }

    func testCumsum() {
        MLXRandom.seed(824)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.07800808548927307,
            accuracy: 0.0015601617097854615)
        XCTAssertEqual(
            a.sum().item(Float.self), 0.9360969662666321,
            accuracy: 0.018721939325332643)
        let result = a.cumsum()
        XCTAssertEqual(result.shape, [12])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.16304373741149902,
            accuracy: -0.0032608747482299806)
        XCTAssertEqual(
            result.sum().item(Float.self), -1.9565248489379883,
            accuracy: -0.03913049697875977)
    }

    func testCumsum1() {
        MLXRandom.seed(940)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.3181919455528259,
            accuracy: -0.0063638389110565186)
        XCTAssertEqual(
            a.sum().item(Float.self), -3.818303346633911,
            accuracy: -0.07636606693267822)
        let result = cumsum(a)
        XCTAssertEqual(result.shape, [12])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -3.2638518810272217,
            accuracy: -0.06527703762054443)
        XCTAssertEqual(
            result.sum().item(Float.self), -39.166221618652344,
            accuracy: -0.7833244323730469)
    }

    func testCumsum2() {
        MLXRandom.seed(561)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.19832412898540497,
            accuracy: 0.0039664825797081)
        XCTAssertEqual(
            a.sum().item(Float.self), 2.379889488220215,
            accuracy: 0.0475977897644043)
        let result = a.cumsum(axis: -1)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.7345349788665771,
            accuracy: 0.014690699577331543)
        XCTAssertEqual(
            result.sum().item(Float.self), 8.814419746398926,
            accuracy: 0.17628839492797851)
    }

    func testCumsum3() {
        MLXRandom.seed(937)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.38423240184783936,
            accuracy: -0.007684648036956787)
        XCTAssertEqual(
            a.sum().item(Float.self), -4.610788822174072,
            accuracy: -0.09221577644348145)
        let result = cumsum(a, axis: -1)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.6559594869613647,
            accuracy: -0.013119189739227296)
        XCTAssertEqual(
            result.sum().item(Float.self), -7.871513366699219,
            accuracy: -0.15743026733398438)
    }

    func testExpandedDimensions() {
        MLXRandom.seed(14)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.20228910446166992,
            accuracy: -0.004045782089233399)
        XCTAssertEqual(
            a.sum().item(Float.self), -2.427469253540039,
            accuracy: -0.04854938507080078)
        let result = expandedDimensions(a, axis: -1)
        XCTAssertEqual(result.shape, [4, 3, 1])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.20228910446166992,
            accuracy: -0.004045782089233399)
        XCTAssertEqual(
            result.sum().item(Float.self), -2.427469253540039,
            accuracy: -0.04854938507080078)
    }

    func testExpandedDimensions1() {
        MLXRandom.seed(95)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.5254887342453003,
            accuracy: 0.010509774684906006)
        XCTAssertEqual(
            a.sum().item(Float.self), 37.83518981933594,
            accuracy: 0.7567037963867188)
        let result = expandedDimensions(a, axes: [0, -1])
        XCTAssertEqual(result.shape, [1, 2, 3, 4, 3, 1])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.5254887342453003,
            accuracy: 0.010509774684906006)
        XCTAssertEqual(
            result.sum().item(Float.self), 37.83518981933594,
            accuracy: 0.7567037963867188)
    }

    func testFloor() {
        MLXRandom.seed(736)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.035255465656518936,
            accuracy: -0.0007051093131303787)
        XCTAssertEqual(
            a.sum().item(Float.self), -0.42306557297706604,
            accuracy: -0.00846131145954132)
        let result = floor(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.4166666865348816,
            accuracy: -0.008333333730697633)
        XCTAssertEqual(
            result.sum().item(Float.self), -5.0,
            accuracy: -0.1)
    }

    func testLog() {
        MLXRandom.seed(860)
        let a = MLXRandom.uniform(low: 0.1, high: 2.0, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.9451824426651001,
            accuracy: 0.018903648853302004)
        XCTAssertEqual(
            a.sum().item(Float.self), 11.342188835144043,
            accuracy: 0.22684377670288086)
        let result = a.log()
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.26455360651016235,
            accuracy: -0.0052910721302032475)
        XCTAssertEqual(
            result.sum().item(Float.self), -3.174643039703369,
            accuracy: -0.06349286079406738)
    }

    func testLog1() {
        MLXRandom.seed(408)
        let a = MLXRandom.uniform(low: 0.1, high: 2.0, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 1.1787240505218506,
            accuracy: 0.023574481010437014)
        XCTAssertEqual(
            a.sum().item(Float.self), 14.144688606262207,
            accuracy: 0.28289377212524414)
        let result = log(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.08071314543485641,
            accuracy: 0.0016142629086971284)
        XCTAssertEqual(
            result.sum().item(Float.self), 0.9685577154159546,
            accuracy: 0.01937115430831909)
    }

    func testLog2() {
        MLXRandom.seed(727)
        let a = MLXRandom.uniform(low: 0.1, high: 2.0, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 1.0156004428863525,
            accuracy: 0.020312008857727052)
        XCTAssertEqual(
            a.sum().item(Float.self), 12.18720531463623,
            accuracy: 0.2437441062927246)
        let result = a.log2()
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.2411154955625534,
            accuracy: -0.004822309911251068)
        XCTAssertEqual(
            result.sum().item(Float.self), -2.893385887145996,
            accuracy: -0.057867717742919926)
    }

    func testLog21() {
        MLXRandom.seed(844)
        let a = MLXRandom.uniform(low: 0.1, high: 2.0, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 1.0754908323287964,
            accuracy: 0.02150981664657593)
        XCTAssertEqual(
            a.sum().item(Float.self), 12.905889511108398,
            accuracy: 0.25811779022216796)
        let result = log2(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.04823940992355347,
            accuracy: -0.0009647881984710694)
        XCTAssertEqual(
            result.sum().item(Float.self), -0.5788729190826416,
            accuracy: -0.011577458381652831)
    }

    func testLog10() {
        MLXRandom.seed(803)
        let a = MLXRandom.uniform(low: 0.1, high: 2.0, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 1.1359423398971558,
            accuracy: 0.022718846797943115)
        XCTAssertEqual(
            a.sum().item(Float.self), 13.631307601928711,
            accuracy: 0.2726261520385742)
        let result = a.log10()
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.07397204637527466,
            accuracy: -0.0014794409275054933)
        XCTAssertEqual(
            result.sum().item(Float.self), -0.8876644968986511,
            accuracy: -0.017753289937973024)
    }

    func testLog101() {
        MLXRandom.seed(684)
        let a = MLXRandom.uniform(low: 0.1, high: 2.0, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 1.3902796506881714,
            accuracy: 0.027805593013763428)
        XCTAssertEqual(
            a.sum().item(Float.self), 16.6833553314209,
            accuracy: 0.333667106628418)
        let result = log10(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.11499349772930145,
            accuracy: 0.002299869954586029)
        XCTAssertEqual(
            result.sum().item(Float.self), 1.3799219131469727,
            accuracy: 0.027598438262939454)
    }

    func testLog1p() {
        MLXRandom.seed(640)
        let a = MLXRandom.uniform(low: 0.1, high: 2.0, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 1.2758265733718872,
            accuracy: 0.025516531467437743)
        XCTAssertEqual(
            a.sum().item(Float.self), 15.309918403625488,
            accuracy: 0.3061983680725098)
        let result = a.log1p()
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.7979601621627808,
            accuracy: 0.015959203243255615)
        XCTAssertEqual(
            result.sum().item(Float.self), 9.575521469116211,
            accuracy: 0.1915104293823242)
    }

    func testLog1p1() {
        MLXRandom.seed(1)
        let a = MLXRandom.uniform(low: 0.1, high: 2.0, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 1.045818567276001,
            accuracy: 0.02091637134552002)
        XCTAssertEqual(
            a.sum().item(Float.self), 12.549821853637695,
            accuracy: 0.25099643707275393)
        let result = log1p(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.686416506767273,
            accuracy: 0.01372833013534546)
        XCTAssertEqual(
            result.sum().item(Float.self), 8.236997604370117,
            accuracy: 0.16473995208740236)
    }

    func testLogSumExp() {
        MLXRandom.seed(626)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.09981077909469604,
            accuracy: -0.001996215581893921)
        XCTAssertEqual(
            a.sum().item(Float.self), -1.1977293491363525,
            accuracy: -0.023954586982727052)
        let result = a.logSumExp()
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 2.6805179119110107,
            accuracy: 0.05361035823822022)
        XCTAssertEqual(
            result.sum().item(Float.self), 2.6805179119110107,
            accuracy: 0.05361035823822022)
    }

    func testLogSumExp1() {
        MLXRandom.seed(505)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.16046583652496338,
            accuracy: 0.0032093167304992677)
        XCTAssertEqual(
            a.sum().item(Float.self), 1.9255900382995605,
            accuracy: 0.038511800765991214)
        let result = logSumExp(a)
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 3.126417636871338,
            accuracy: 0.06252835273742675)
        XCTAssertEqual(
            result.sum().item(Float.self), 3.126417636871338,
            accuracy: 0.06252835273742675)
    }

    func testLogSumExp2() {
        MLXRandom.seed(847)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.2282017469406128,
            accuracy: -0.004564034938812256)
        XCTAssertEqual(
            a.sum().item(Float.self), -2.7384209632873535,
            accuracy: -0.05476841926574707)
        let result = a.logSumExp(axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 1.163524866104126,
            accuracy: 0.02327049732208252)
        XCTAssertEqual(
            result.sum().item(Float.self), 4.654099464416504,
            accuracy: 0.09308198928833009)
    }

    func testLogSumExp3() {
        MLXRandom.seed(888)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.05087994784116745,
            accuracy: 0.001017598956823349)
        XCTAssertEqual(
            a.sum().item(Float.self), 0.610559344291687,
            accuracy: 0.01221118688583374)
        let result = logSumExp(a, axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 1.5178632736206055,
            accuracy: 0.03035726547241211)
        XCTAssertEqual(
            result.sum().item(Float.self), 6.071453094482422,
            accuracy: 0.12142906188964844)
    }

    func testLogSumExp4() {
        MLXRandom.seed(341)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.5185534358024597,
            accuracy: 0.010371068716049195)
        XCTAssertEqual(
            a.sum().item(Float.self), 37.335845947265625,
            accuracy: 0.7467169189453126)
        let result = a.logSumExp(axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 2.3395986557006836,
            accuracy: 0.046791973114013674)
        XCTAssertEqual(
            result.sum().item(Float.self), 28.07518196105957,
            accuracy: 0.5615036392211914)
    }

    func testLogSumExp5() {
        MLXRandom.seed(249)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.48312702775001526,
            accuracy: 0.009662540555000305)
        XCTAssertEqual(
            a.sum().item(Float.self), 34.7851448059082,
            accuracy: 0.695702896118164)
        let result = logSumExp(a, axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 2.314382553100586,
            accuracy: 0.04628765106201172)
        XCTAssertEqual(
            result.sum().item(Float.self), 27.7725887298584,
            accuracy: 0.555451774597168)
    }

    func testMax() {
        MLXRandom.seed(747)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.23745165765285492,
            accuracy: 0.004749033153057099)
        XCTAssertEqual(
            a.sum().item(Float.self), 2.8494198322296143,
            accuracy: 0.056988396644592286)
        let result = a.max()
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 1.8713812828063965,
            accuracy: 0.03742762565612793)
        XCTAssertEqual(
            result.sum().item(Float.self), 1.8713812828063965,
            accuracy: 0.03742762565612793)
    }

    func testMax1() {
        MLXRandom.seed(333)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.08884426206350327,
            accuracy: 0.0017768852412700653)
        XCTAssertEqual(
            a.sum().item(Float.self), 1.0661311149597168,
            accuracy: 0.021322622299194335)
        let result = max(a)
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 1.4511317014694214,
            accuracy: 0.029022634029388428)
        XCTAssertEqual(
            result.sum().item(Float.self), 1.4511317014694214,
            accuracy: 0.029022634029388428)
    }

    func testMax2() {
        MLXRandom.seed(720)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.03598502278327942,
            accuracy: -0.0007197004556655884)
        XCTAssertEqual(
            a.sum().item(Float.self), -0.431820273399353,
            accuracy: -0.00863640546798706)
        let result = a.max(axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 1.0814929008483887,
            accuracy: 0.021629858016967773)
        XCTAssertEqual(
            result.sum().item(Float.self), 4.325971603393555,
            accuracy: 0.08651943206787109)
    }

    func testMax3() {
        MLXRandom.seed(891)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.2537704408168793,
            accuracy: -0.005075408816337585)
        XCTAssertEqual(
            a.sum().item(Float.self), -3.0452451705932617,
            accuracy: -0.06090490341186523)
        let result = max(a, axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.30163291096687317,
            accuracy: 0.006032658219337464)
        XCTAssertEqual(
            result.sum().item(Float.self), 1.2065316438674927,
            accuracy: 0.024130632877349855)
    }

    func testMax4() {
        MLXRandom.seed(64)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.5222265124320984,
            accuracy: 0.010444530248641969)
        XCTAssertEqual(
            a.sum().item(Float.self), 37.60030746459961,
            accuracy: 0.7520061492919922)
        let result = a.max(axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.8983621597290039,
            accuracy: 0.01796724319458008)
        XCTAssertEqual(
            result.sum().item(Float.self), 10.780345916748047,
            accuracy: 0.21560691833496093)
    }

    func testMax5() {
        MLXRandom.seed(195)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.4561886787414551,
            accuracy: 0.009123773574829101)
        XCTAssertEqual(
            a.sum().item(Float.self), 32.845584869384766,
            accuracy: 0.6569116973876953)
        let result = max(a, axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.7991632223129272,
            accuracy: 0.015983264446258545)
        XCTAssertEqual(
            result.sum().item(Float.self), 9.589958190917969,
            accuracy: 0.19179916381835938)
    }

    func testMean() {
        MLXRandom.seed(939)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.1672295778989792,
            accuracy: -0.0033445915579795836)
        XCTAssertEqual(
            a.sum().item(Float.self), -2.0067548751831055,
            accuracy: -0.040135097503662114)
        let result = a.mean()
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.1672295778989792,
            accuracy: -0.0033445915579795836)
        XCTAssertEqual(
            result.sum().item(Float.self), -0.1672295778989792,
            accuracy: -0.0033445915579795836)
    }

    func testMean1() {
        MLXRandom.seed(581)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.3291994333267212,
            accuracy: -0.006583988666534424)
        XCTAssertEqual(
            a.sum().item(Float.self), -3.950392961502075,
            accuracy: -0.0790078592300415)
        let result = mean(a)
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.3291994333267212,
            accuracy: -0.006583988666534424)
        XCTAssertEqual(
            result.sum().item(Float.self), -0.3291994333267212,
            accuracy: -0.006583988666534424)
    }

    func testMean2() {
        MLXRandom.seed(227)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.28339889645576477,
            accuracy: -0.005667977929115295)
        XCTAssertEqual(
            a.sum().item(Float.self), -3.4007866382598877,
            accuracy: -0.06801573276519776)
        let result = a.mean(axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.2833988666534424,
            accuracy: -0.005667977333068848)
        XCTAssertEqual(
            result.sum().item(Float.self), -1.1335954666137695,
            accuracy: -0.022671909332275392)
    }

    func testMean3() {
        MLXRandom.seed(244)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.5779480934143066,
            accuracy: 0.011558961868286134)
        XCTAssertEqual(
            a.sum().item(Float.self), 6.93537712097168,
            accuracy: 0.1387075424194336)
        let result = mean(a, axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.5779481530189514,
            accuracy: 0.011558963060379028)
        XCTAssertEqual(
            result.sum().item(Float.self), 2.3117926120758057,
            accuracy: 0.046235852241516114)
    }

    func testMean4() {
        MLXRandom.seed(822)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.4916161596775055,
            accuracy: 0.00983232319355011)
        XCTAssertEqual(
            a.sum().item(Float.self), 35.3963623046875,
            accuracy: 0.70792724609375)
        let result = a.mean(axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.4916161894798279,
            accuracy: 0.009832323789596557)
        XCTAssertEqual(
            result.sum().item(Float.self), 5.8993940353393555,
            accuracy: 0.11798788070678712)
    }

    func testMean5() {
        MLXRandom.seed(990)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.4603706896305084,
            accuracy: 0.009207413792610168)
        XCTAssertEqual(
            a.sum().item(Float.self), 33.146690368652344,
            accuracy: 0.6629338073730469)
        let result = mean(a, axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.4603707790374756,
            accuracy: 0.009207415580749513)
        XCTAssertEqual(
            result.sum().item(Float.self), 5.524449348449707,
            accuracy: 0.11048898696899415)
    }

    func testMin() {
        MLXRandom.seed(145)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.16449235379695892,
            accuracy: -0.0032898470759391784)
        XCTAssertEqual(
            a.sum().item(Float.self), -1.9739081859588623,
            accuracy: -0.03947816371917725)
        let result = a.min()
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -1.3645747900009155,
            accuracy: -0.02729149580001831)
        XCTAssertEqual(
            result.sum().item(Float.self), -1.3645747900009155,
            accuracy: -0.02729149580001831)
    }

    func testMin1() {
        MLXRandom.seed(822)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.025983989238739014,
            accuracy: 0.0005196797847747803)
        XCTAssertEqual(
            a.sum().item(Float.self), 0.31180787086486816,
            accuracy: 0.006236157417297363)
        let result = min(a)
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -1.8071335554122925,
            accuracy: -0.03614267110824585)
        XCTAssertEqual(
            result.sum().item(Float.self), -1.8071335554122925,
            accuracy: -0.03614267110824585)
    }

    func testMin2() {
        MLXRandom.seed(556)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.47528061270713806,
            accuracy: 0.00950561225414276)
        XCTAssertEqual(
            a.sum().item(Float.self), 5.703367233276367,
            accuracy: 0.11406734466552734)
        let result = a.min(axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.6413009166717529,
            accuracy: -0.012826018333435059)
        XCTAssertEqual(
            result.sum().item(Float.self), -2.5652036666870117,
            accuracy: -0.051304073333740235)
    }

    func testMin3() {
        MLXRandom.seed(458)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.1867717206478119,
            accuracy: 0.003735434412956238)
        XCTAssertEqual(
            a.sum().item(Float.self), 2.241260528564453,
            accuracy: 0.04482521057128906)
        let result = min(a, axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.8374209403991699,
            accuracy: -0.0167484188079834)
        XCTAssertEqual(
            result.sum().item(Float.self), -3.3496837615966797,
            accuracy: -0.0669936752319336)
    }

    func testMin4() {
        MLXRandom.seed(93)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.4830058515071869,
            accuracy: 0.009660117030143738)
        XCTAssertEqual(
            a.sum().item(Float.self), 34.77642059326172,
            accuracy: 0.6955284118652344)
        let result = a.min(axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.11048994958400726,
            accuracy: 0.0022097989916801454)
        XCTAssertEqual(
            result.sum().item(Float.self), 1.3258793354034424,
            accuracy: 0.02651758670806885)
    }

    func testMin5() {
        MLXRandom.seed(82)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.5077146887779236,
            accuracy: 0.010154293775558472)
        XCTAssertEqual(
            a.sum().item(Float.self), 36.555458068847656,
            accuracy: 0.7311091613769531)
        let result = min(a, axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.12779314815998077,
            accuracy: 0.0025558629631996154)
        XCTAssertEqual(
            result.sum().item(Float.self), 1.5335177183151245,
            accuracy: 0.030670354366302492)
    }

    func testProduct() {
        MLXRandom.seed(327)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.296897828578949,
            accuracy: -0.00593795657157898)
        XCTAssertEqual(
            a.sum().item(Float.self), -3.5627739429473877,
            accuracy: -0.07125547885894776)
        let result = a.product()
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 3.555632019924815e-06,
            accuracy: 7.11126403984963e-08)
        XCTAssertEqual(
            result.sum().item(Float.self), 3.555632019924815e-06,
            accuracy: 7.11126403984963e-08)
    }

    func testProduct1() {
        MLXRandom.seed(896)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.05823778361082077,
            accuracy: -0.0011647556722164155)
        XCTAssertEqual(
            a.sum().item(Float.self), -0.6988533735275269,
            accuracy: -0.013977067470550537)
        let result = product(a)
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.0047314404509961605,
            accuracy: 9.462880901992321e-05)
        XCTAssertEqual(
            result.sum().item(Float.self), 0.0047314404509961605,
            accuracy: 9.462880901992321e-05)
    }

    func testProduct2() {
        MLXRandom.seed(520)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.19801780581474304,
            accuracy: 0.003960356116294861)
        XCTAssertEqual(
            a.sum().item(Float.self), 2.376213550567627,
            accuracy: 0.04752427101135254)
        let result = a.product(axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.0764155238866806,
            accuracy: 0.0015283104777336122)
        XCTAssertEqual(
            result.sum().item(Float.self), 0.3056620955467224,
            accuracy: 0.006113241910934449)
    }

    func testProduct3() {
        MLXRandom.seed(955)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.36796003580093384,
            accuracy: 0.007359200716018677)
        XCTAssertEqual(
            a.sum().item(Float.self), 4.415520191192627,
            accuracy: 0.08831040382385254)
        let result = product(a, axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.0716419368982315,
            accuracy: 0.0014328387379646302)
        XCTAssertEqual(
            result.sum().item(Float.self), 0.286567747592926,
            accuracy: 0.005731354951858521)
    }

    func testProduct4() {
        MLXRandom.seed(501)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.5341216921806335,
            accuracy: 0.010682433843612671)
        XCTAssertEqual(
            a.sum().item(Float.self), 38.45676040649414,
            accuracy: 0.7691352081298828)
        let result = a.product(axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.02406497858464718,
            accuracy: 0.0004812995716929436)
        XCTAssertEqual(
            result.sum().item(Float.self), 0.28877973556518555,
            accuracy: 0.0057755947113037115)
    }

    func testProduct5() {
        MLXRandom.seed(111)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.4650188088417053,
            accuracy: 0.009300376176834107)
        XCTAssertEqual(
            a.sum().item(Float.self), 33.481353759765625,
            accuracy: 0.6696270751953125)
        let result = product(a, axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.007884619757533073,
            accuracy: 0.00015769239515066148)
        XCTAssertEqual(
            result.sum().item(Float.self), 0.09461543709039688,
            accuracy: 0.0018923087418079377)
    }

    func testReciprocal() {
        MLXRandom.seed(308)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.12339428067207336,
            accuracy: -0.0024678856134414673)
        XCTAssertEqual(
            a.sum().item(Float.self), -1.4807313680648804,
            accuracy: -0.029614627361297607)
        let result = a.reciprocal()
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 1.3978341817855835,
            accuracy: 0.02795668363571167)
        XCTAssertEqual(
            result.sum().item(Float.self), 16.774009704589844,
            accuracy: 0.33548019409179686)
    }

    func testReciprocal1() {
        MLXRandom.seed(564)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.20050053298473358,
            accuracy: -0.004010010659694672)
        XCTAssertEqual(
            a.sum().item(Float.self), -2.406006336212158,
            accuracy: -0.048120126724243165)
        let result = reciprocal(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.753860592842102,
            accuracy: -0.015077211856842042)
        XCTAssertEqual(
            result.sum().item(Float.self), -9.046326637268066,
            accuracy: -0.18092653274536133)
    }

    func testRound() {
        MLXRandom.seed(298)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.23528259992599487,
            accuracy: 0.004705651998519898)
        XCTAssertEqual(
            a.sum().item(Float.self), 2.8233911991119385,
            accuracy: 0.05646782398223877)
        let result = a.round()
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.25,
            accuracy: 0.005)
        XCTAssertEqual(
            result.sum().item(Float.self), 3.0,
            accuracy: 0.06)
    }

    func testRound1() {
        MLXRandom.seed(723)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.16675782203674316,
            accuracy: 0.0033351564407348632)
        XCTAssertEqual(
            a.sum().item(Float.self), 2.001093864440918,
            accuracy: 0.04002187728881836)
        let result = round(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.25,
            accuracy: 0.005)
        XCTAssertEqual(
            result.sum().item(Float.self), 3.0,
            accuracy: 0.06)
    }

    func testSin() {
        MLXRandom.seed(127)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.18461060523986816,
            accuracy: -0.0036922121047973633)
        XCTAssertEqual(
            a.sum().item(Float.self), -2.215327262878418,
            accuracy: -0.04430654525756836)
        let result = a.sin()
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.15534619987010956,
            accuracy: -0.0031069239974021914)
        XCTAssertEqual(
            result.sum().item(Float.self), -1.86415433883667,
            accuracy: -0.0372830867767334)
    }

    func testSin1() {
        MLXRandom.seed(560)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.15535306930541992,
            accuracy: -0.0031070613861083987)
        XCTAssertEqual(
            a.sum().item(Float.self), -1.864236831665039,
            accuracy: -0.03728473663330078)
        let result = sin(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.13987457752227783,
            accuracy: -0.002797491550445557)
        XCTAssertEqual(
            result.sum().item(Float.self), -1.6784948110580444,
            accuracy: -0.03356989622116089)
    }

    func testCos() {
        MLXRandom.seed(340)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.18920934200286865,
            accuracy: 0.003784186840057373)
        XCTAssertEqual(
            a.sum().item(Float.self), 2.270512104034424,
            accuracy: 0.04541024208068848)
        let result = a.cos()
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.7257080078125,
            accuracy: 0.01451416015625)
        XCTAssertEqual(
            result.sum().item(Float.self), 8.70849609375,
            accuracy: 0.174169921875)
    }

    func testCos1() {
        MLXRandom.seed(834)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.18475177884101868,
            accuracy: 0.0036950355768203737)
        XCTAssertEqual(
            a.sum().item(Float.self), 2.2170212268829346,
            accuracy: 0.04434042453765869)
        let result = cos(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.4963728189468384,
            accuracy: 0.009927456378936769)
        XCTAssertEqual(
            result.sum().item(Float.self), 5.9564738273620605,
            accuracy: 0.11912947654724121)
    }

    func testSqrt() {
        MLXRandom.seed(944)
        let a = MLXRandom.uniform(low: 0.1, high: 2.0, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 1.1813615560531616,
            accuracy: 0.023627231121063234)
        XCTAssertEqual(
            a.sum().item(Float.self), 14.176338195800781,
            accuracy: 0.2835267639160156)
        let result = a.sqrt()
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 1.040137767791748,
            accuracy: 0.02080275535583496)
        XCTAssertEqual(
            result.sum().item(Float.self), 12.481653213500977,
            accuracy: 0.24963306427001955)
    }

    func testSqrt1() {
        MLXRandom.seed(553)
        let a = MLXRandom.uniform(low: 0.1, high: 2.0, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 1.2980049848556519,
            accuracy: 0.025960099697113038)
        XCTAssertEqual(
            a.sum().item(Float.self), 15.576059341430664,
            accuracy: 0.3115211868286133)
        let result = sqrt(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 1.118424415588379,
            accuracy: 0.02236848831176758)
        XCTAssertEqual(
            result.sum().item(Float.self), 13.421092987060547,
            accuracy: 0.26842185974121097)
    }

    func testSum() {
        MLXRandom.seed(208)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.013726795092225075,
            accuracy: 0.0002745359018445015)
        XCTAssertEqual(
            a.sum().item(Float.self), 0.1647215336561203,
            accuracy: 0.003294430673122406)
        let result = a.sum()
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.1647215336561203,
            accuracy: 0.003294430673122406)
        XCTAssertEqual(
            result.sum().item(Float.self), 0.1647215336561203,
            accuracy: 0.003294430673122406)
    }

    func testSum1() {
        MLXRandom.seed(986)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.08680947870016098,
            accuracy: 0.0017361895740032197)
        XCTAssertEqual(
            a.sum().item(Float.self), 1.0417137145996094,
            accuracy: 0.020834274291992187)
        let result = sum(a)
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 1.0417137145996094,
            accuracy: 0.020834274291992187)
        XCTAssertEqual(
            result.sum().item(Float.self), 1.0417137145996094,
            accuracy: 0.020834274291992187)
    }

    func testSum2() {
        MLXRandom.seed(818)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.01743374764919281,
            accuracy: -0.0003486749529838562)
        XCTAssertEqual(
            a.sum().item(Float.self), -0.20920497179031372,
            accuracy: -0.004184099435806275)
        let result = a.sum(axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.05230128765106201,
            accuracy: -0.0010460257530212403)
        XCTAssertEqual(
            result.sum().item(Float.self), -0.20920515060424805,
            accuracy: -0.004184103012084961)
    }

    func testSum3() {
        MLXRandom.seed(617)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.2992609739303589,
            accuracy: -0.005985219478607178)
        XCTAssertEqual(
            a.sum().item(Float.self), -3.5911316871643066,
            accuracy: -0.07182263374328614)
        let result = sum(a, axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.8977828621864319,
            accuracy: -0.017955657243728638)
        XCTAssertEqual(
            result.sum().item(Float.self), -3.5911314487457275,
            accuracy: -0.07182262897491455)
    }

    func testSum4() {
        MLXRandom.seed(560)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.4772148132324219,
            accuracy: 0.009544296264648438)
        XCTAssertEqual(
            a.sum().item(Float.self), 34.359466552734375,
            accuracy: 0.6871893310546875)
        let result = a.sum(axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 2.8632893562316895,
            accuracy: 0.05726578712463379)
        XCTAssertEqual(
            result.sum().item(Float.self), 34.35947036743164,
            accuracy: 0.6871894073486329)
    }

    func testSum5() {
        MLXRandom.seed(601)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.5380033850669861,
            accuracy: 0.010760067701339722)
        XCTAssertEqual(
            a.sum().item(Float.self), 38.736244201660156,
            accuracy: 0.7747248840332032)
        let result = sum(a, axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 3.228020429611206,
            accuracy: 0.06456040859222412)
        XCTAssertEqual(
            result.sum().item(Float.self), 38.736244201660156,
            accuracy: 0.7747248840332032)
    }

    func testVariance() {
        MLXRandom.seed(294)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.047887593507766724,
            accuracy: 0.0009577518701553345)
        XCTAssertEqual(
            a.sum().item(Float.self), 0.5746511220932007,
            accuracy: 0.011493022441864014)
        let result = a.variance()
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.6768754124641418,
            accuracy: 0.013537508249282838)
        XCTAssertEqual(
            result.sum().item(Float.self), 0.6768754124641418,
            accuracy: 0.013537508249282838)
    }

    func testVariance1() {
        MLXRandom.seed(455)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.07983233034610748,
            accuracy: 0.0015966466069221496)
        XCTAssertEqual(
            a.sum().item(Float.self), 0.957987904548645,
            accuracy: 0.019159758090972902)
        let result = variance(a)
        XCTAssertEqual(result.shape, [])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.5957978367805481,
            accuracy: 0.011915956735610963)
        XCTAssertEqual(
            result.sum().item(Float.self), 0.5957978367805481,
            accuracy: 0.011915956735610963)
    }

    func testVariance2() {
        MLXRandom.seed(93)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.028267383575439453,
            accuracy: -0.0005653476715087891)
        XCTAssertEqual(
            a.sum().item(Float.self), -0.33920860290527344,
            accuracy: -0.006784172058105469)
        let result = a.variance(axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 1.0322922468185425,
            accuracy: 0.02064584493637085)
        XCTAssertEqual(
            result.sum().item(Float.self), 4.12916898727417,
            accuracy: 0.0825833797454834)
    }

    func testVariance3() {
        MLXRandom.seed(610)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.01769038289785385,
            accuracy: -0.00035380765795707704)
        XCTAssertEqual(
            a.sum().item(Float.self), -0.21228459477424622,
            accuracy: -0.004245691895484924)
        let result = variance(a, axis: -1)
        XCTAssertEqual(result.shape, [4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.591558039188385,
            accuracy: 0.0118311607837677)
        XCTAssertEqual(
            result.sum().item(Float.self), 2.36623215675354,
            accuracy: 0.0473246431350708)
    }

    func testVariance4() {
        MLXRandom.seed(817)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.4460234045982361,
            accuracy: 0.008920468091964721)
        XCTAssertEqual(
            a.sum().item(Float.self), 32.113685607910156,
            accuracy: 0.6422737121582032)
        let result = a.variance(axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.0666377991437912,
            accuracy: 0.001332755982875824)
        XCTAssertEqual(
            result.sum().item(Float.self), 0.7996535301208496,
            accuracy: 0.015993070602416993)
    }

    func testVariance5() {
        MLXRandom.seed(394)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.56817227602005,
            accuracy: 0.011363445520401002)
        XCTAssertEqual(
            a.sum().item(Float.self), 40.90840530395508,
            accuracy: 0.8181681060791016)
        let result = variance(a, axes: [0, -1])
        XCTAssertEqual(result.shape, [3, 4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.07289446890354156,
            accuracy: 0.0014578893780708313)
        XCTAssertEqual(
            result.sum().item(Float.self), 0.8747336268424988,
            accuracy: 0.017494672536849977)
    }

    func testAcos() {
        MLXRandom.seed(324)
        let a = MLXRandom.uniform(low: 0.1, high: 1.0, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.5365500450134277,
            accuracy: 0.010731000900268555)
        XCTAssertEqual(
            a.sum().item(Float.self), 6.438600063323975,
            accuracy: 0.1287720012664795)
        let result = acos(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.9425711631774902,
            accuracy: 0.018851423263549806)
        XCTAssertEqual(
            result.sum().item(Float.self), 11.310853958129883,
            accuracy: 0.22621707916259767)
    }

    func testAcosh() {
        MLXRandom.seed(589)
        let a = MLXRandom.uniform(low: 1, high: 3, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 1.9692752361297607,
            accuracy: 0.039385504722595215)
        XCTAssertEqual(
            a.sum().item(Float.self), 23.631301879882812,
            accuracy: 0.47262603759765626)
        let result = acosh(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 1.259089469909668,
            accuracy: 0.02518178939819336)
        XCTAssertEqual(
            result.sum().item(Float.self), 15.109073638916016,
            accuracy: 0.3021814727783203)
    }

    func testAsin() {
        MLXRandom.seed(247)
        let a = MLXRandom.uniform(low: 0.1, high: 1.0, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.4699937105178833,
            accuracy: 0.009399874210357666)
        XCTAssertEqual(
            a.sum().item(Float.self), 5.6399245262146,
            accuracy: 0.112798490524292)
        let result = asin(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.5069084763526917,
            accuracy: 0.010138169527053834)
        XCTAssertEqual(
            result.sum().item(Float.self), 6.082901477813721,
            accuracy: 0.12165802955627442)
    }

    func testAsinh() {
        MLXRandom.seed(297)
        let a = MLXRandom.uniform(low: 1, high: 3, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 1.7906322479248047,
            accuracy: 0.03581264495849609)
        XCTAssertEqual(
            a.sum().item(Float.self), 21.487586975097656,
            accuracy: 0.4297517395019531)
        let result = asinh(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 1.3248964548110962,
            accuracy: 0.026497929096221923)
        XCTAssertEqual(
            result.sum().item(Float.self), 15.898756980895996,
            accuracy: 0.31797513961791996)
    }

    func testAtan() {
        MLXRandom.seed(188)
        let a = MLXRandom.uniform(low: 0.1, high: 1.0, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.43250617384910583,
            accuracy: 0.008650123476982116)
        XCTAssertEqual(
            a.sum().item(Float.self), 5.1900739669799805,
            accuracy: 0.10380147933959961)
        let result = atan(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.3987109661102295,
            accuracy: 0.00797421932220459)
        XCTAssertEqual(
            result.sum().item(Float.self), 4.784531593322754,
            accuracy: 0.09569063186645509)
    }

    func testAtanh() {
        MLXRandom.seed(193)
        let a = MLXRandom.uniform(low: 0.1, high: 0.9, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.593014657497406,
            accuracy: 0.01186029314994812)
        XCTAssertEqual(
            a.sum().item(Float.self), 7.116175651550293,
            accuracy: 0.14232351303100585)
        let result = atanh(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.759239137172699,
            accuracy: 0.01518478274345398)
        XCTAssertEqual(
            result.sum().item(Float.self), 9.110869407653809,
            accuracy: 0.18221738815307617)
    }

    func testCeil() {
        MLXRandom.seed(841)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.3292633295059204,
            accuracy: -0.006585266590118408)
        XCTAssertEqual(
            a.sum().item(Float.self), -3.951159715652466,
            accuracy: -0.07902319431304931)
        let result = ceil(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.3333333432674408,
            accuracy: 0.006666666865348816)
        XCTAssertEqual(
            result.sum().item(Float.self), 4.0,
            accuracy: 0.08)
    }

    func testCosh() {
        MLXRandom.seed(191)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.5465152263641357,
            accuracy: -0.010930304527282716)
        XCTAssertEqual(
            a.sum().item(Float.self), -6.558182239532471,
            accuracy: -0.1311636447906494)
        let result = cosh(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 1.735574722290039,
            accuracy: 0.03471149444580078)
        XCTAssertEqual(
            result.sum().item(Float.self), 20.82689666748047,
            accuracy: 0.41653793334960937)
    }

    func testErf() {
        MLXRandom.seed(33)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.15268580615520477,
            accuracy: 0.0030537161231040956)
        XCTAssertEqual(
            a.sum().item(Float.self), 1.8322296142578125,
            accuracy: 0.03664459228515625)
        let result = erf(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.16305577754974365,
            accuracy: 0.003261115550994873)
        XCTAssertEqual(
            result.sum().item(Float.self), 1.9566693305969238,
            accuracy: 0.03913338661193848)
    }

    func testErfInverse() {
        MLXRandom.seed(627)
        let a = MLXRandom.uniform(low: 0.1, high: 0.9, [4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.4853326678276062,
            accuracy: 0.009706653356552124)
        XCTAssertEqual(
            a.sum().item(Float.self), 5.823991775512695,
            accuracy: 0.11647983551025391)
        let result = erfInverse(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.5043282508850098,
            accuracy: 0.010086565017700196)
        XCTAssertEqual(
            result.sum().item(Float.self), 6.051938533782959,
            accuracy: 0.12103877067565919)
    }

    func testLogicalNot() {
        MLXRandom.seed(672)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.16328130662441254,
            accuracy: 0.0032656261324882506)
        XCTAssertEqual(
            a.sum().item(Float.self), 1.9593756198883057,
            accuracy: 0.03918751239776611)
        let result = logicalNot(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), false)
        XCTAssertEqual(result.any().item(), false)
    }

    func testNegative() {
        MLXRandom.seed(266)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.20902606844902039,
            accuracy: 0.004180521368980407)
        XCTAssertEqual(
            a.sum().item(Float.self), 2.508312702178955,
            accuracy: 0.050166254043579106)
        let result = negative(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.20902606844902039,
            accuracy: -0.004180521368980407)
        XCTAssertEqual(
            result.sum().item(Float.self), -2.508312702178955,
            accuracy: -0.050166254043579106)
    }

    func testSigmoid() {
        MLXRandom.seed(487)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.4737564027309418,
            accuracy: -0.009475128054618835)
        XCTAssertEqual(
            a.sum().item(Float.self), -5.685076713562012,
            accuracy: -0.11370153427124023)
        let result = sigmoid(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.40112757682800293,
            accuracy: 0.00802255153656006)
        XCTAssertEqual(
            result.sum().item(Float.self), 4.813530921936035,
            accuracy: 0.0962706184387207)
    }

    func testSign() {
        MLXRandom.seed(70)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.19362865388393402,
            accuracy: -0.0038725730776786806)
        XCTAssertEqual(
            a.sum().item(Float.self), -2.3235437870025635,
            accuracy: -0.04647087574005127)
        let result = sign(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.3333333432674408,
            accuracy: -0.006666666865348816)
        XCTAssertEqual(
            result.sum().item(Float.self), -4.0,
            accuracy: -0.08)
    }

    func testSinh() {
        MLXRandom.seed(91)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.37823864817619324,
            accuracy: 0.007564772963523865)
        XCTAssertEqual(
            a.sum().item(Float.self), 4.538863658905029,
            accuracy: 0.09077727317810058)
        let result = sinh(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.8675357103347778,
            accuracy: 0.017350714206695556)
        XCTAssertEqual(
            result.sum().item(Float.self), 10.410428047180176,
            accuracy: 0.20820856094360352)
    }

    func testSoftMax() {
        MLXRandom.seed(695)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.14673520624637604,
            accuracy: -0.002934704124927521)
        XCTAssertEqual(
            a.sum().item(Float.self), -1.7608224153518677,
            accuracy: -0.03521644830703735)
        let result = softMax(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.0833333283662796,
            accuracy: 0.0016666665673255921)
        XCTAssertEqual(
            result.sum().item(Float.self), 0.9999998807907104,
            accuracy: 0.01999999761581421)
    }

    func testSoftMax1() {
        MLXRandom.seed(775)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.27563148736953735,
            accuracy: 0.005512629747390747)
        XCTAssertEqual(
            a.sum().item(Float.self), 3.307577610015869,
            accuracy: 0.06615155220031739)
        let result = softMax(a, axis: -1)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.3333333432674408,
            accuracy: 0.006666666865348816)
        XCTAssertEqual(
            result.sum().item(Float.self), 4.0,
            accuracy: 0.08)
    }

    func testSoftMax2() {
        MLXRandom.seed(133)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 3, 4, 3])
        XCTAssertEqual(a.shape, [2, 3, 4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.5304720401763916,
            accuracy: 0.010609440803527832)
        XCTAssertEqual(
            a.sum().item(Float.self), 38.19398498535156,
            accuracy: 0.7638796997070313)
        let result = softMax(a, axes: [0, -1])
        XCTAssertEqual(result.shape, [2, 3, 4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.1666666716337204,
            accuracy: 0.003333333432674408)
        XCTAssertEqual(
            result.sum().item(Float.self), 12.0,
            accuracy: 0.24)
    }

    func testTan() {
        MLXRandom.seed(897)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.3048655390739441,
            accuracy: -0.006097310781478882)
        XCTAssertEqual(
            a.sum().item(Float.self), -3.65838623046875,
            accuracy: -0.073167724609375)
        let result = tan(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.0694185122847557,
            accuracy: 0.001388370245695114)
        XCTAssertEqual(
            result.sum().item(Float.self), 0.8330221176147461,
            accuracy: 0.016660442352294923)
    }

    func testTanh() {
        MLXRandom.seed(153)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.45169347524642944,
            accuracy: -0.009033869504928588)
        XCTAssertEqual(
            a.sum().item(Float.self), -5.420321464538574,
            accuracy: -0.10840642929077149)
        let result = tanh(a)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.3471390902996063,
            accuracy: -0.006942781805992127)
        XCTAssertEqual(
            result.sum().item(Float.self), -4.165668964385986,
            accuracy: -0.08331337928771973)
    }

    func testMLXadd() {
        MLXRandom.seed(945)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.3744015097618103,
            accuracy: 0.007488030195236206)
        XCTAssertEqual(
            a.sum().item(Float.self), 4.4928178787231445,
            accuracy: 0.08985635757446289)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(
            b.mean().item(Float.self), -0.20527128875255585,
            accuracy: -0.004105425775051117)
        XCTAssertEqual(
            b.sum().item(Float.self), -2.4632554054260254,
            accuracy: -0.04926510810852051)
        let result = MLX.add(a, b)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.16913020610809326,
            accuracy: 0.0033826041221618653)
        XCTAssertEqual(
            result.sum().item(Float.self), 2.029562473297119,
            accuracy: 0.040591249465942385)
    }

    func testConv1d() {
        MLXRandom.seed(39)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [4, 10, 4])
        XCTAssertEqual(a.shape, [4, 10, 4])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.5018469095230103,
            accuracy: 0.010036938190460205)
        XCTAssertEqual(
            a.sum().item(Float.self), 80.29550170898438,
            accuracy: 1.6059100341796875)
        let b = MLXRandom.uniform(0.0 ..< 1.0, [2, 10, 4])
        XCTAssertEqual(b.shape, [2, 10, 4])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(
            b.mean().item(Float.self), 0.5621036291122437,
            accuracy: 0.011242072582244873)
        XCTAssertEqual(
            b.sum().item(Float.self), 44.96828842163086,
            accuracy: 0.8993657684326172)
        let result = conv1d(a, b)
        XCTAssertEqual(result.shape, [4, 1, 2])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 11.004511833190918,
            accuracy: 0.22009023666381836)
        XCTAssertEqual(
            result.sum().item(Float.self), 88.03609466552734,
            accuracy: 1.7607218933105468)
    }

    func testConv2d() {
        MLXRandom.seed(862)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [4, 10, 12, 4])
        XCTAssertEqual(a.shape, [4, 10, 12, 4])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.5062730312347412,
            accuracy: 0.010125460624694825)
        XCTAssertEqual(
            a.sum().item(Float.self), 972.044189453125,
            accuracy: 19.4408837890625)
        let b = MLXRandom.uniform(0.0 ..< 1.0, [2, 10, 12, 4])
        XCTAssertEqual(b.shape, [2, 10, 12, 4])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(
            b.mean().item(Float.self), 0.4991826117038727,
            accuracy: 0.009983652234077454)
        XCTAssertEqual(
            b.sum().item(Float.self), 479.21527099609375,
            accuracy: 9.584305419921876)
        let result = conv2d(a, b)
        XCTAssertEqual(result.shape, [4, 1, 1, 2])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 121.8356704711914,
            accuracy: 2.4367134094238283)
        XCTAssertEqual(
            result.sum().item(Float.self), 974.6853637695312,
            accuracy: 19.493707275390626)
    }

    func testConvolve() {
        MLXRandom.seed(82)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [20])
        XCTAssertEqual(a.shape, [20])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.4547460675239563,
            accuracy: 0.009094921350479125)
        XCTAssertEqual(
            a.sum().item(Float.self), 9.094921112060547,
            accuracy: 0.18189842224121094)
        let b = MLXRandom.uniform(0.0 ..< 1.0, [4])
        XCTAssertEqual(b.shape, [4])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(
            b.mean().item(Float.self), 0.36941707134246826,
            accuracy: 0.007388341426849365)
        XCTAssertEqual(
            b.sum().item(Float.self), 1.477668285369873,
            accuracy: 0.02955336570739746)
        let result = convolve(a, b)
        XCTAssertEqual(result.shape, [23])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.5843163132667542,
            accuracy: 0.011686326265335084)
        XCTAssertEqual(
            result.sum().item(Float.self), 13.439274787902832,
            accuracy: 0.26878549575805666)
    }

    func testDivide() {
        MLXRandom.seed(919)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.2972916066646576,
            accuracy: -0.005945832133293152)
        XCTAssertEqual(
            a.sum().item(Float.self), -3.5674991607666016,
            accuracy: -0.07134998321533204)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(
            b.mean().item(Float.self), 0.04941798374056816,
            accuracy: 0.0009883596748113633)
        XCTAssertEqual(
            b.sum().item(Float.self), 0.5930157899856567,
            accuracy: 0.011860315799713136)
        let result = divide(a, b)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -3.7239060401916504,
            accuracy: -0.07447812080383301)
        XCTAssertEqual(
            result.sum().item(Float.self), -44.68687057495117,
            accuracy: -0.8937374114990234)
    }

    func testEqual() {
        MLXRandom.seed(716)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.3898356854915619,
            accuracy: 0.007796713709831238)
        XCTAssertEqual(
            a.sum().item(Float.self), 4.678028106689453,
            accuracy: 0.09356056213378906)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(
            b.mean().item(Float.self), -0.30894142389297485,
            accuracy: -0.0061788284778594976)
        XCTAssertEqual(
            b.sum().item(Float.self), -3.707296848297119,
            accuracy: -0.07414593696594239)
        let result = equal(a, b)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), false)
        XCTAssertEqual(result.any().item(), false)
    }

    func testGreater() {
        MLXRandom.seed(945)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.3744015097618103,
            accuracy: 0.007488030195236206)
        XCTAssertEqual(
            a.sum().item(Float.self), 4.4928178787231445,
            accuracy: 0.08985635757446289)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(
            b.mean().item(Float.self), -0.20527128875255585,
            accuracy: -0.004105425775051117)
        XCTAssertEqual(
            b.sum().item(Float.self), -2.4632554054260254,
            accuracy: -0.04926510810852051)
        let result = greater(a, b)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), false)
        XCTAssertEqual(result.any().item(), true)
    }

    func testGreaterEqual() {
        MLXRandom.seed(849)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.5959362983703613,
            accuracy: -0.011918725967407227)
        XCTAssertEqual(
            a.sum().item(Float.self), -7.151235103607178,
            accuracy: -0.14302470207214354)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(
            b.mean().item(Float.self), 0.42154282331466675,
            accuracy: 0.008430856466293336)
        XCTAssertEqual(
            b.sum().item(Float.self), 5.058513641357422,
            accuracy: 0.10117027282714844)
        let result = greaterEqual(a, b)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), false)
        XCTAssertEqual(result.any().item(), true)
    }

    func testLess() {
        MLXRandom.seed(553)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.41794854402542114,
            accuracy: 0.008358970880508423)
        XCTAssertEqual(
            a.sum().item(Float.self), 5.015382289886475,
            accuracy: 0.1003076457977295)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(
            b.mean().item(Float.self), -0.19319520890712738,
            accuracy: -0.0038639041781425476)
        XCTAssertEqual(
            b.sum().item(Float.self), -2.318342447280884,
            accuracy: -0.04636684894561768)
        let result = less(a, b)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), false)
        XCTAssertEqual(result.any().item(), true)
    }

    func testLessEqual() {
        MLXRandom.seed(699)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.06386314332485199,
            accuracy: 0.0012772628664970398)
        XCTAssertEqual(
            a.sum().item(Float.self), 0.7663577198982239,
            accuracy: 0.015327154397964478)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(
            b.mean().item(Float.self), -0.44176310300827026,
            accuracy: -0.008835262060165406)
        XCTAssertEqual(
            b.sum().item(Float.self), -5.301156997680664,
            accuracy: -0.10602313995361329)
        let result = lessEqual(a, b)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), false)
        XCTAssertEqual(result.any().item(), true)
    }

    func testLogAddExp() {
        MLXRandom.seed(400)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.19093476235866547,
            accuracy: -0.0038186952471733096)
        XCTAssertEqual(
            a.sum().item(Float.self), -2.291217088699341,
            accuracy: -0.04582434177398682)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(
            b.mean().item(Float.self), 0.09774001687765121,
            accuracy: 0.001954800337553024)
        XCTAssertEqual(
            b.sum().item(Float.self), 1.1728801727294922,
            accuracy: 0.023457603454589845)
        let result = logAddExp(a, b)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.7312957048416138,
            accuracy: 0.014625914096832275)
        XCTAssertEqual(
            result.sum().item(Float.self), 8.775547981262207,
            accuracy: 0.17551095962524416)
    }

    func testMatmul() {
        MLXRandom.seed(857)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [10, 8])
        XCTAssertEqual(a.shape, [10, 8])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.517481803894043,
            accuracy: 0.01034963607788086)
        XCTAssertEqual(
            a.sum().item(Float.self), 41.39854431152344,
            accuracy: 0.8279708862304688)
        let b = MLXRandom.uniform(0.0 ..< 1.0, [8, 13])
        XCTAssertEqual(b.shape, [8, 13])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(
            b.mean().item(Float.self), 0.4867754876613617,
            accuracy: 0.009735509753227234)
        XCTAssertEqual(
            b.sum().item(Float.self), 50.62464904785156,
            accuracy: 1.0124929809570313)
        let result = matmul(a, b)
        XCTAssertEqual(result.shape, [10, 13])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 2.032482862472534,
            accuracy: 0.04064965724945068)
        XCTAssertEqual(
            result.sum().item(Float.self), 264.2227783203125,
            accuracy: 5.28445556640625)
    }

    func testMaximum() {
        MLXRandom.seed(722)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.01978858932852745,
            accuracy: -0.00039577178657054904)
        XCTAssertEqual(
            a.sum().item(Float.self), -0.2374630719423294,
            accuracy: -0.004749261438846588)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(
            b.mean().item(Float.self), 0.34027594327926636,
            accuracy: 0.006805518865585327)
        XCTAssertEqual(
            b.sum().item(Float.self), 4.083311080932617,
            accuracy: 0.08166622161865235)
        let result = maximum(a, b)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.6268421411514282,
            accuracy: 0.012536842823028565)
        XCTAssertEqual(
            result.sum().item(Float.self), 7.522105693817139,
            accuracy: 0.15044211387634276)
    }

    func testMinimum() {
        MLXRandom.seed(537)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.15274646878242493,
            accuracy: 0.0030549293756484985)
        XCTAssertEqual(
            a.sum().item(Float.self), 1.8329575061798096,
            accuracy: 0.03665915012359619)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(
            b.mean().item(Float.self), 0.16062960028648376,
            accuracy: 0.003212592005729675)
        XCTAssertEqual(
            b.sum().item(Float.self), 1.9275552034378052,
            accuracy: 0.03855110406875611)
        let result = minimum(a, b)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.4159923493862152,
            accuracy: -0.008319846987724304)
        XCTAssertEqual(
            result.sum().item(Float.self), -4.991908073425293,
            accuracy: -0.09983816146850587)
    }

    func testMultiply() {
        MLXRandom.seed(282)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.016050420701503754,
            accuracy: -0.0003210084140300751)
        XCTAssertEqual(
            a.sum().item(Float.self), -0.19260503351688385,
            accuracy: -0.003852100670337677)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(
            b.mean().item(Float.self), 0.2504279613494873,
            accuracy: 0.0050085592269897465)
        XCTAssertEqual(
            b.sum().item(Float.self), 3.0051355361938477,
            accuracy: 0.060102710723876955)
        let result = multiply(a, b)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.2712330222129822,
            accuracy: -0.005424660444259643)
        XCTAssertEqual(
            result.sum().item(Float.self), -3.254796266555786,
            accuracy: -0.06509592533111572)
    }

    func testNotEqual() {
        MLXRandom.seed(534)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.5144619941711426,
            accuracy: -0.010289239883422853)
        XCTAssertEqual(
            a.sum().item(Float.self), -6.173543453216553,
            accuracy: -0.12347086906433105)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(
            b.mean().item(Float.self), -0.15448352694511414,
            accuracy: -0.0030896705389022827)
        XCTAssertEqual(
            b.sum().item(Float.self), -1.8538023233413696,
            accuracy: -0.03707604646682739)
        let result = notEqual(a, b)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .bool)
        XCTAssertEqual(result.all().item(), true)
        XCTAssertEqual(result.any().item(), true)
    }

    func testRemainder() {
        MLXRandom.seed(831)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.27154868841171265,
            accuracy: 0.005430973768234253)
        XCTAssertEqual(
            a.sum().item(Float.self), 3.2585840225219727,
            accuracy: 0.06517168045043946)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(
            b.mean().item(Float.self), 0.1420227438211441,
            accuracy: 0.0028404548764228823)
        XCTAssertEqual(
            b.sum().item(Float.self), 1.7042728662490845,
            accuracy: 0.03408545732498169)
        let result = remainder(a, b)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.007391604594886303,
            accuracy: -0.00014783209189772606)
        XCTAssertEqual(
            result.sum().item(Float.self), -0.08869925141334534,
            accuracy: -0.0017739850282669067)
    }

    func testSubtract() {
        MLXRandom.seed(241)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.1329968273639679,
            accuracy: -0.002659936547279358)
        XCTAssertEqual(
            a.sum().item(Float.self), -1.5959618091583252,
            accuracy: -0.031919236183166506)
        let b = MLXRandom.normal([4, 3])
        XCTAssertEqual(b.shape, [4, 3])
        XCTAssertEqual(b.dtype, .float32)
        XCTAssertEqual(
            b.mean().item(Float.self), 0.03048303723335266,
            accuracy: 0.0006096607446670532)
        XCTAssertEqual(
            b.sum().item(Float.self), 0.36579644680023193,
            accuracy: 0.007315928936004639)
        let result = subtract(a, b)
        XCTAssertEqual(result.shape, [4, 3])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.16347989439964294,
            accuracy: -0.003269597887992859)
        XCTAssertEqual(
            result.sum().item(Float.self), -1.9617586135864258,
            accuracy: -0.03923517227172851)
    }

    func testQuantize() {
        MLXRandom.seed(869)
        let w = MLXRandom.uniform(0.0 ..< 1.0, [32, 256])
        let (wq, scales, biases) = quantized(w, bits: 8)
        XCTAssertEqual(wq.shape, [32, 64])
        XCTAssertEqual(wq.dtype, .uint32)
        XCTAssertEqual(
            wq.mean().item(Float.self), 1684202.0,
            accuracy: 33684.04)
        XCTAssertEqual(
            wq.sum().item(Float.self), 3_449_245_696,
            accuracy: 68984912.26)

        XCTAssertEqual(scales.shape, [32, 4])
        XCTAssertEqual(scales.dtype, .float32)
        XCTAssertEqual(
            scales.mean().item(Float.self), 0.0037989525590091944,
            accuracy: 7.597905118018388e-05)
        XCTAssertEqual(
            scales.sum().item(Float.self), 0.4862659275531769,
            accuracy: 0.009725318551063537)

        XCTAssertEqual(biases.shape, [32, 4])
        XCTAssertEqual(biases.dtype, .float32)
        XCTAssertEqual(
            biases.mean().item(Float.self), 0.01748880185186863,
            accuracy: 0.0003497760370373726)
        XCTAssertEqual(
            biases.sum().item(Float.self), 2.2385666370391846,
            accuracy: 0.044771332740783695)

    }

    func testFft_() {
        MLXRandom.seed(220)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [100, 100])
        XCTAssertEqual(r.shape, [100, 100])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.49703681468963623,
            accuracy: 0.009940736293792725)
        XCTAssertEqual(
            r.sum().item(Float.self), 4970.3681640625,
            accuracy: 99.40736328125)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [100, 100])
        XCTAssertEqual(i.shape, [100, 100])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.49617284536361694,
            accuracy: 0.00992345690727234)
        XCTAssertEqual(
            i.sum().item(Float.self), 4961.728515625,
            accuracy: 99.2345703125)
        let c = r + i.asImaginary()
        let result = fft(c, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [100, 100])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 0.5186547636985779,
            accuracy: 0.010373095273971558)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 5186.5478515625,
            accuracy: 103.73095703125)
        XCTAssertEqual(resultImaginary.shape, [100, 100])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), 0.4938635528087616,
            accuracy: 0.009877271056175233)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), 4938.6357421875,
            accuracy: 98.77271484375001)
    }

    func testFft_1() {
        MLXRandom.seed(916)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [100, 100])
        XCTAssertEqual(r.shape, [100, 100])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.4961331784725189,
            accuracy: 0.00992266356945038)
        XCTAssertEqual(
            r.sum().item(Float.self), 4961.33203125,
            accuracy: 99.226640625)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [100, 100])
        XCTAssertEqual(i.shape, [100, 100])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.49821561574935913,
            accuracy: 0.009964312314987183)
        XCTAssertEqual(
            i.sum().item(Float.self), 4982.15625,
            accuracy: 99.643125)
        let c = r + i.asImaginary()
        let result = fft(c, n: 80, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [100, 80])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 0.4616168737411499,
            accuracy: 0.009232337474822999)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 3692.934814453125,
            accuracy: 73.85869628906251)
        XCTAssertEqual(resultImaginary.shape, [100, 80])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), 0.4507213234901428,
            accuracy: 0.009014426469802857)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), 3605.7705078125,
            accuracy: 72.11541015625001)
    }

    func testFft_2() {
        MLXRandom.seed(695)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [100, 100])
        XCTAssertEqual(r.shape, [100, 100])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.497734934091568,
            accuracy: 0.00995469868183136)
        XCTAssertEqual(
            r.sum().item(Float.self), 4977.349609375,
            accuracy: 99.5469921875)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [100, 100])
        XCTAssertEqual(i.shape, [100, 100])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.5017335414886475,
            accuracy: 0.010034670829772949)
        XCTAssertEqual(
            i.sum().item(Float.self), 5017.33544921875,
            accuracy: 100.346708984375)
        let c = r + i.asImaginary()
        let result = fft(c, n: 120, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [100, 120])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 0.5616999268531799,
            accuracy: 0.011233998537063599)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 6740.3994140625,
            accuracy: 134.80798828125)
        XCTAssertEqual(resultImaginary.shape, [100, 120])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), 0.5033472180366516,
            accuracy: 0.010066944360733033)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), 6040.1669921875,
            accuracy: 120.80333984375)
    }

    func testFft_3() {
        MLXRandom.seed(603)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [100, 100])
        XCTAssertEqual(r.shape, [100, 100])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.4938477873802185,
            accuracy: 0.00987695574760437)
        XCTAssertEqual(
            r.sum().item(Float.self), 4938.47802734375,
            accuracy: 98.769560546875)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [100, 100])
        XCTAssertEqual(i.shape, [100, 100])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.5019298791885376,
            accuracy: 0.010038597583770752)
        XCTAssertEqual(
            i.sum().item(Float.self), 5019.298828125,
            accuracy: 100.3859765625)
        let c = r + i.asImaginary()
        let result = fft(c, axis: 0, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [100, 100])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 0.5286791324615479,
            accuracy: 0.010573582649230957)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 5286.79150390625,
            accuracy: 105.735830078125)
        XCTAssertEqual(resultImaginary.shape, [100, 100])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), 0.5054363012313843,
            accuracy: 0.010108726024627685)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), 5054.36328125,
            accuracy: 101.087265625)
    }

    func testIfft_() {
        MLXRandom.seed(845)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(r.shape, [100])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.4823684096336365,
            accuracy: 0.00964736819267273)
        XCTAssertEqual(
            r.sum().item(Float.self), 48.23684310913086,
            accuracy: 0.9647368621826172)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(i.shape, [100])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.47583281993865967,
            accuracy: 0.009516656398773193)
        XCTAssertEqual(
            i.sum().item(Float.self), 47.583282470703125,
            accuracy: 0.9516656494140625)
        let c = r + i.asImaginary()
        let result = ifft(c, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [100])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 0.006908764597028494,
            accuracy: 0.00013817529194056987)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 0.6908764839172363,
            accuracy: 0.013817529678344726)
        XCTAssertEqual(resultImaginary.shape, [100])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), 0.005689740646630526,
            accuracy: 0.00011379481293261051)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), 0.5689740777015686,
            accuracy: 0.011379481554031371)
    }

    func testIfft_1() {
        MLXRandom.seed(972)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(r.shape, [100])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.46860700845718384,
            accuracy: 0.009372140169143678)
        XCTAssertEqual(
            r.sum().item(Float.self), 46.86070251464844,
            accuracy: 0.9372140502929688)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(i.shape, [100])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.4761311113834381,
            accuracy: 0.009522622227668762)
        XCTAssertEqual(
            i.sum().item(Float.self), 47.61311340332031,
            accuracy: 0.9522622680664062)
        let c = r + i.asImaginary()
        let result = ifft(c, n: 80, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [80])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 0.005004124250262976,
            accuracy: 0.00010008248500525951)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 0.40032994747161865,
            accuracy: 0.008006598949432373)
        XCTAssertEqual(resultImaginary.shape, [80])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), 0.0003413451777305454,
            accuracy: 6.826903554610908e-06)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), 0.02730761468410492,
            accuracy: 0.0005461522936820984)
    }

    func testIfft_2() {
        MLXRandom.seed(429)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(r.shape, [100])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.4427134692668915,
            accuracy: 0.008854269385337829)
        XCTAssertEqual(
            r.sum().item(Float.self), 44.27134704589844,
            accuracy: 0.8854269409179688)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(i.shape, [100])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.46247541904449463,
            accuracy: 0.009249508380889893)
        XCTAssertEqual(
            i.sum().item(Float.self), 46.24754333496094,
            accuracy: 0.9249508666992188)
        let c = r + i.asImaginary()
        let result = ifft(c, n: 120, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [120])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 0.0033431013580411673,
            accuracy: 6.686202716082335e-05)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 0.40117213129997253,
            accuracy: 0.00802344262599945)
        XCTAssertEqual(resultImaginary.shape, [120])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), 0.0048831733874976635,
            accuracy: 9.766346774995328e-05)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), 0.5859807729721069,
            accuracy: 0.01171961545944214)
    }

    func testIfft_3() {
        MLXRandom.seed(593)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(r.shape, [100])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.4806605279445648,
            accuracy: 0.009613210558891297)
        XCTAssertEqual(
            r.sum().item(Float.self), 48.06605529785156,
            accuracy: 0.9613211059570312)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(i.shape, [100])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.48936721682548523,
            accuracy: 0.009787344336509705)
        XCTAssertEqual(
            i.sum().item(Float.self), 48.93672180175781,
            accuracy: 0.9787344360351563)
        let c = r + i.asImaginary()
        let result = ifft(c, axis: 0, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [100])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 0.009695236571133137,
            accuracy: 0.00019390473142266273)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 0.9695236682891846,
            accuracy: 0.019390473365783693)
        XCTAssertEqual(resultImaginary.shape, [100])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), 0.008965172804892063,
            accuracy: 0.00017930345609784126)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), 0.896517276763916,
            accuracy: 0.017930345535278322)
    }

    func testRfft_() {
        MLXRandom.seed(281)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(r.shape, [100])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.512880265712738,
            accuracy: 0.01025760531425476)
        XCTAssertEqual(
            r.sum().item(Float.self), 51.28802490234375,
            accuracy: 1.025760498046875)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(i.shape, [100])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.5312841534614563,
            accuracy: 0.010625683069229126)
        XCTAssertEqual(
            i.sum().item(Float.self), 53.12841796875,
            accuracy: 1.062568359375)
        let c = r + i.asImaginary()
        let result = rfft(c, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [51])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 1.0831178426742554,
            accuracy: 0.021662356853485106)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 55.23900604248047,
            accuracy: 1.1047801208496093)
        XCTAssertEqual(resultImaginary.shape, [51])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), 0.31754177808761597,
            accuracy: 0.006350835561752319)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), 16.194629669189453,
            accuracy: 0.32389259338378906)
    }

    func testRfft_1() {
        MLXRandom.seed(461)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(r.shape, [100])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.4627799987792969,
            accuracy: 0.009255599975585938)
        XCTAssertEqual(
            r.sum().item(Float.self), 46.27799987792969,
            accuracy: 0.9255599975585938)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(i.shape, [100])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.5184644460678101,
            accuracy: 0.010369288921356202)
        XCTAssertEqual(
            i.sum().item(Float.self), 51.84644317626953,
            accuracy: 1.0369288635253906)
        let c = r + i.asImaginary()
        let result = rfft(c, n: 80, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [41])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 1.3340529203414917,
            accuracy: 0.026681058406829834)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 54.696170806884766,
            accuracy: 1.0939234161376954)
        XCTAssertEqual(resultImaginary.shape, [41])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), 0.09739136695861816,
            accuracy: 0.0019478273391723632)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), 3.993046283721924,
            accuracy: 0.07986092567443848)
    }

    func testRfft_2() {
        MLXRandom.seed(504)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(r.shape, [100])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.47210997343063354,
            accuracy: 0.009442199468612671)
        XCTAssertEqual(
            r.sum().item(Float.self), 47.21099853515625,
            accuracy: 0.944219970703125)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(i.shape, [100])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.4813127815723419,
            accuracy: 0.009626255631446838)
        XCTAssertEqual(
            i.sum().item(Float.self), 48.13127899169922,
            accuracy: 0.9626255798339844)
        let c = r + i.asImaginary()
        let result = rfft(c, n: 120, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [61])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 0.421972393989563,
            accuracy: 0.00843944787979126)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 25.740318298339844,
            accuracy: 0.5148063659667969)
        XCTAssertEqual(resultImaginary.shape, [61])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), -0.24379387497901917,
            accuracy: -0.004875877499580384)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), -14.871427536010742,
            accuracy: -0.29742855072021485)
    }

    func testRfft_3() {
        MLXRandom.seed(676)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(r.shape, [100])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.4711613357067108,
            accuracy: 0.009423226714134217)
        XCTAssertEqual(
            r.sum().item(Float.self), 47.11613464355469,
            accuracy: 0.9423226928710937)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(i.shape, [100])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.47868087887763977,
            accuracy: 0.009573617577552795)
        XCTAssertEqual(
            i.sum().item(Float.self), 47.86808776855469,
            accuracy: 0.9573617553710938)
        let c = r + i.asImaginary()
        let result = rfft(c, axis: 0, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [51])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 0.5287001729011536,
            accuracy: 0.010574003458023071)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 26.963706970214844,
            accuracy: 0.5392741394042969)
        XCTAssertEqual(resultImaginary.shape, [51])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), 0.25333887338638306,
            accuracy: 0.005066777467727661)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), 12.920282363891602,
            accuracy: 0.25840564727783205)
    }

    func testIrfft_() {
        MLXRandom.seed(656)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(r.shape, [100])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.476201593875885,
            accuracy: 0.0095240318775177)
        XCTAssertEqual(
            r.sum().item(Float.self), 47.62015914916992,
            accuracy: 0.9524031829833984)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(i.shape, [100])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.5490368008613586,
            accuracy: 0.010980736017227172)
        XCTAssertEqual(
            i.sum().item(Float.self), 54.90367889404297,
            accuracy: 1.0980735778808595)
        let c = r + i.asImaginary()
        let result = irfft(c, stream: .cpu)
        XCTAssertEqual(result.shape, [198])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.0028988695703446865,
            accuracy: 5.797739140689373e-05)
        XCTAssertEqual(
            result.sum().item(Float.self), 0.5739761590957642,
            accuracy: 0.011479523181915283)
    }

    func testIrfft_1() {
        MLXRandom.seed(717)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(r.shape, [100])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.5386900305747986,
            accuracy: 0.010773800611495972)
        XCTAssertEqual(
            r.sum().item(Float.self), 53.86900329589844,
            accuracy: 1.0773800659179689)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(i.shape, [100])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.4603566527366638,
            accuracy: 0.009207133054733276)
        XCTAssertEqual(
            i.sum().item(Float.self), 46.035667419433594,
            accuracy: 0.9207133483886719)
        let c = r + i.asImaginary()
        let result = irfft(c, n: 80, stream: .cpu)
        XCTAssertEqual(result.shape, [80])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.0038530919700860977,
            accuracy: 7.706183940172196e-05)
        XCTAssertEqual(
            result.sum().item(Float.self), 0.3082473576068878,
            accuracy: 0.006164947152137757)
    }

    func testIrfft_2() {
        MLXRandom.seed(938)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(r.shape, [100])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.5083585381507874,
            accuracy: 0.010167170763015747)
        XCTAssertEqual(
            r.sum().item(Float.self), 50.835853576660156,
            accuracy: 1.0167170715332032)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(i.shape, [100])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.4999184012413025,
            accuracy: 0.00999836802482605)
        XCTAssertEqual(
            i.sum().item(Float.self), 49.99184036254883,
            accuracy: 0.9998368072509766)
        let c = r + i.asImaginary()
        let result = irfft(c, n: 120, stream: .cpu)
        XCTAssertEqual(result.shape, [120])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.0034326675813645124,
            accuracy: 6.865335162729025e-05)
        XCTAssertEqual(
            result.sum().item(Float.self), 0.41192010045051575,
            accuracy: 0.008238402009010316)
    }

    func testIrfft_3() {
        MLXRandom.seed(812)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(r.shape, [100])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.4437080919742584,
            accuracy: 0.008874161839485169)
        XCTAssertEqual(
            r.sum().item(Float.self), 44.370811462402344,
            accuracy: 0.8874162292480469)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [100])
        XCTAssertEqual(i.shape, [100])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.5141764879226685,
            accuracy: 0.01028352975845337)
        XCTAssertEqual(
            i.sum().item(Float.self), 51.41764831542969,
            accuracy: 1.0283529663085937)
        let c = r + i.asImaginary()
        let result = irfft(c, axis: 0, stream: .cpu)
        XCTAssertEqual(result.shape, [198])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.004781102295964956,
            accuracy: 9.562204591929913e-05)
        XCTAssertEqual(
            result.sum().item(Float.self), 0.9466582536697388,
            accuracy: 0.018933165073394775)
    }

    func testFft2_() {
        MLXRandom.seed(365)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.5127536058425903,
            accuracy: 0.010255072116851807)
        XCTAssertEqual(
            r.sum().item(Float.self), 262.52984619140625,
            accuracy: 5.250596923828125)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.5092339515686035,
            accuracy: 0.01018467903137207)
        XCTAssertEqual(
            i.sum().item(Float.self), 260.727783203125,
            accuracy: 5.2145556640625)
        let c = r + i.asImaginary()
        let result = fft2(c, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 8, 8])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 0.3378489017486572,
            accuracy: 0.0067569780349731445)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 172.9786376953125,
            accuracy: 3.45957275390625)
        XCTAssertEqual(resultImaginary.shape, [8, 8, 8])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), 0.4062993824481964,
            accuracy: 0.008125987648963929)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), 208.02528381347656,
            accuracy: 4.160505676269532)
    }

    func testFft2_1() {
        MLXRandom.seed(84)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.5123671293258667,
            accuracy: 0.010247342586517334)
        XCTAssertEqual(
            r.sum().item(Float.self), 262.33197021484375,
            accuracy: 5.246639404296875)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.502106249332428,
            accuracy: 0.01004212498664856)
        XCTAssertEqual(
            i.sum().item(Float.self), 257.0783996582031,
            accuracy: 5.141567993164062)
        let c = r + i.asImaginary()
        let result = fft2(c, s: [3, 4], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 3, 4])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 0.5198299884796143,
            accuracy: 0.010396599769592285)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 49.9036750793457,
            accuracy: 0.9980735015869141)
        XCTAssertEqual(resultImaginary.shape, [8, 3, 4])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), 0.5818836688995361,
            accuracy: 0.011637673377990723)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), 55.8608283996582,
            accuracy: 1.117216567993164)
    }

    func testFft2_2() {
        MLXRandom.seed(332)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.4954897463321686,
            accuracy: 0.009909794926643371)
        XCTAssertEqual(
            r.sum().item(Float.self), 253.6907501220703,
            accuracy: 5.073815002441406)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.5005261898040771,
            accuracy: 0.010010523796081543)
        XCTAssertEqual(
            i.sum().item(Float.self), 256.2694091796875,
            accuracy: 5.12538818359375)
        let c = r + i.asImaginary()
        let result = fft2(c, axes: [0, 2], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 8, 8])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 0.3796372711658478,
            accuracy: 0.007592745423316956)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 194.37428283691406,
            accuracy: 3.8874856567382814)
        XCTAssertEqual(resultImaginary.shape, [8, 8, 8])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), 0.6848205327987671,
            accuracy: 0.013696410655975343)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), 350.62811279296875,
            accuracy: 7.012562255859375)
    }

    func testFft2_3() {
        MLXRandom.seed(627)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.48098403215408325,
            accuracy: 0.009619680643081665)
        XCTAssertEqual(
            r.sum().item(Float.self), 246.26382446289062,
            accuracy: 4.925276489257812)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.49524593353271484,
            accuracy: 0.009904918670654296)
        XCTAssertEqual(
            i.sum().item(Float.self), 253.56591796875,
            accuracy: 5.071318359375)
        let c = r + i.asImaginary()
        let result = fft2(c, s: [10, 5], axes: [2, 1], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 5, 10])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 0.39667367935180664,
            accuracy: 0.007933473587036133)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 158.6694793701172,
            accuracy: 3.173389587402344)
        XCTAssertEqual(resultImaginary.shape, [8, 5, 10])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), 0.46095579862594604,
            accuracy: 0.009219115972518921)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), 184.38232421875,
            accuracy: 3.687646484375)
    }

    func testIfft2_() {
        MLXRandom.seed(118)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.4939275085926056,
            accuracy: 0.009878550171852112)
        XCTAssertEqual(
            r.sum().item(Float.self), 252.89088439941406,
            accuracy: 5.0578176879882815)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.5031070709228516,
            accuracy: 0.010062141418457031)
        XCTAssertEqual(
            i.sum().item(Float.self), 257.5908203125,
            accuracy: 5.15181640625)
        let c = r + i.asImaginary()
        let result = ifft2(c, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 8, 8])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 0.009310859255492687,
            accuracy: 0.00018621718510985374)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 4.767159938812256,
            accuracy: 0.09534319877624511)
        XCTAssertEqual(resultImaginary.shape, [8, 8, 8])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), 0.006652233190834522,
            accuracy: 0.00013304466381669044)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), 3.4059433937072754,
            accuracy: 0.0681188678741455)
    }

    func testIfft2_1() {
        MLXRandom.seed(498)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.5009815096855164,
            accuracy: 0.010019630193710327)
        XCTAssertEqual(
            r.sum().item(Float.self), 256.5025329589844,
            accuracy: 5.1300506591796875)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.49243441224098206,
            accuracy: 0.009848688244819642)
        XCTAssertEqual(
            i.sum().item(Float.self), 252.1264190673828,
            accuracy: 5.0425283813476565)
        let c = r + i.asImaginary()
        let result = ifft2(c, s: [3, 4], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 3, 4])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 0.055086322128772736,
            accuracy: 0.0011017264425754547)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 5.2882866859436035,
            accuracy: 0.10576573371887207)
        XCTAssertEqual(resultImaginary.shape, [8, 3, 4])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), 0.052069030702114105,
            accuracy: 0.001041380614042282)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), 4.998626708984375,
            accuracy: 0.0999725341796875)
    }

    func testIfft2_2() {
        MLXRandom.seed(601)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.5043255686759949,
            accuracy: 0.010086511373519898)
        XCTAssertEqual(
            r.sum().item(Float.self), 258.2146911621094,
            accuracy: 5.164293823242188)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.5282406806945801,
            accuracy: 0.010564813613891602)
        XCTAssertEqual(
            i.sum().item(Float.self), 270.459228515625,
            accuracy: 5.4091845703125)
        let c = r + i.asImaginary()
        let result = ifft2(c, axes: [0, 2], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 8, 8])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 0.005900253541767597,
            accuracy: 0.00011800507083535194)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 3.0209298133850098,
            accuracy: 0.06041859626770019)
        XCTAssertEqual(resultImaginary.shape, [8, 8, 8])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), 0.009091435000300407,
            accuracy: 0.00018182870000600816)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), 4.654814720153809,
            accuracy: 0.09309629440307618)
    }

    func testIfft2_3() {
        MLXRandom.seed(645)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.5046442151069641,
            accuracy: 0.010092884302139282)
        XCTAssertEqual(
            r.sum().item(Float.self), 258.3778381347656,
            accuracy: 5.1675567626953125)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.4897768199443817,
            accuracy: 0.009795536398887635)
        XCTAssertEqual(
            i.sum().item(Float.self), 250.76573181152344,
            accuracy: 5.015314636230469)
        let c = r + i.asImaginary()
        let result = ifft2(c, s: [10, 5], axes: [2, 1], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 5, 10])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 0.011821601539850235,
            accuracy: 0.0002364320307970047)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 4.728640556335449,
            accuracy: 0.09457281112670898)
        XCTAssertEqual(resultImaginary.shape, [8, 5, 10])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), 0.007806990761309862,
            accuracy: 0.00015613981522619725)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), 3.1227962970733643,
            accuracy: 0.06245592594146729)
    }

    func testFftn_() {
        MLXRandom.seed(343)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.4879269003868103,
            accuracy: 0.009758538007736206)
        XCTAssertEqual(
            r.sum().item(Float.self), 249.81857299804688,
            accuracy: 4.996371459960938)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.49864500761032104,
            accuracy: 0.009972900152206421)
        XCTAssertEqual(
            i.sum().item(Float.self), 255.30624389648438,
            accuracy: 5.1061248779296875)
        let c = r + i.asImaginary()
        let result = fftn(c, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 8, 8])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 0.8467151522636414,
            accuracy: 0.01693430304527283)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 433.5181579589844,
            accuracy: 8.670363159179688)
        XCTAssertEqual(resultImaginary.shape, [8, 8, 8])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), 0.28999343514442444,
            accuracy: 0.005799868702888489)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), 148.4766387939453,
            accuracy: 2.9695327758789065)
    }

    func testFftn_1() {
        MLXRandom.seed(865)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.506011962890625,
            accuracy: 0.0101202392578125)
        XCTAssertEqual(
            r.sum().item(Float.self), 259.078125,
            accuracy: 5.1815625)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.4955616891384125,
            accuracy: 0.00991123378276825)
        XCTAssertEqual(
            i.sum().item(Float.self), 253.7275848388672,
            accuracy: 5.074551696777344)
        let c = r + i.asImaginary()
        let result = fftn(c, s: [3, 4], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 3, 4])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 0.3270348012447357,
            accuracy: 0.006540696024894714)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 31.395339965820312,
            accuracy: 0.6279067993164062)
        XCTAssertEqual(resultImaginary.shape, [8, 3, 4])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), 0.4940086305141449,
            accuracy: 0.009880172610282898)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), 47.424827575683594,
            accuracy: 0.9484965515136718)
    }

    func testFftn_2() {
        MLXRandom.seed(194)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.48457071185112,
            accuracy: 0.0096914142370224)
        XCTAssertEqual(
            r.sum().item(Float.self), 248.10020446777344,
            accuracy: 4.962004089355469)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.4813538193702698,
            accuracy: 0.009627076387405396)
        XCTAssertEqual(
            i.sum().item(Float.self), 246.45315551757812,
            accuracy: 4.929063110351563)
        let c = r + i.asImaginary()
        let result = fftn(c, axes: [0, 2], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 8, 8])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 0.6415871381759644,
            accuracy: 0.012831742763519288)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 328.49261474609375,
            accuracy: 6.569852294921875)
        XCTAssertEqual(resultImaginary.shape, [8, 8, 8])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), 0.5985268950462341,
            accuracy: 0.011970537900924684)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), 306.4457702636719,
            accuracy: 6.128915405273438)
    }

    func testFftn_3() {
        MLXRandom.seed(248)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.48458826541900635,
            accuracy: 0.009691765308380127)
        XCTAssertEqual(
            r.sum().item(Float.self), 248.10919189453125,
            accuracy: 4.962183837890625)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.5036082863807678,
            accuracy: 0.010072165727615356)
        XCTAssertEqual(
            i.sum().item(Float.self), 257.8474426269531,
            accuracy: 5.156948852539062)
        let c = r + i.asImaginary()
        let result = fftn(c, s: [10, 5], axes: [2, 1], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 5, 10])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 0.44054391980171204,
            accuracy: 0.008810878396034241)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 176.2175750732422,
            accuracy: 3.5243515014648437)
        XCTAssertEqual(resultImaginary.shape, [8, 5, 10])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), 0.5384612679481506,
            accuracy: 0.010769225358963012)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), 215.384521484375,
            accuracy: 4.3076904296875)
    }

    func testIfftn_() {
        MLXRandom.seed(16)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.4910537600517273,
            accuracy: 0.009821075201034547)
        XCTAssertEqual(
            r.sum().item(Float.self), 251.41952514648438,
            accuracy: 5.028390502929688)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.4993511438369751,
            accuracy: 0.009987022876739502)
        XCTAssertEqual(
            i.sum().item(Float.self), 255.66778564453125,
            accuracy: 5.113355712890625)
        let c = r + i.asImaginary()
        let result = ifftn(c, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 8, 8])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 0.000745800556614995,
            accuracy: 1.49160111322999e-05)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 0.38184988498687744,
            accuracy: 0.007636997699737549)
        XCTAssertEqual(resultImaginary.shape, [8, 8, 8])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), 0.00013762176968157291,
            accuracy: 2.7524353936314585e-06)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), 0.07046234607696533,
            accuracy: 0.0014092469215393067)
    }

    func testIfftn_1() {
        MLXRandom.seed(749)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.5013963580131531,
            accuracy: 0.010027927160263062)
        XCTAssertEqual(
            r.sum().item(Float.self), 256.7149353027344,
            accuracy: 5.134298706054688)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.49108564853668213,
            accuracy: 0.009821712970733643)
        XCTAssertEqual(
            i.sum().item(Float.self), 251.43585205078125,
            accuracy: 5.028717041015625)
        let c = r + i.asImaginary()
        let result = ifftn(c, s: [3, 4], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 3, 4])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 0.029997922480106354,
            accuracy: 0.0005999584496021271)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 2.87980055809021,
            accuracy: 0.0575960111618042)
        XCTAssertEqual(resultImaginary.shape, [8, 3, 4])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), 0.04324401170015335,
            accuracy: 0.0008648802340030671)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), 4.151424884796143,
            accuracy: 0.08302849769592285)
    }

    func testIfftn_2() {
        MLXRandom.seed(277)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.5160338878631592,
            accuracy: 0.010320677757263183)
        XCTAssertEqual(
            r.sum().item(Float.self), 264.2093505859375,
            accuracy: 5.28418701171875)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.48932191729545593,
            accuracy: 0.009786438345909119)
        XCTAssertEqual(
            i.sum().item(Float.self), 250.53282165527344,
            accuracy: 5.010656433105469)
        let c = r + i.asImaginary()
        let result = ifftn(c, axes: [0, 2], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 8, 8])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 0.007633390370756388,
            accuracy: 0.00015266780741512775)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 3.9082958698272705,
            accuracy: 0.07816591739654541)
        XCTAssertEqual(resultImaginary.shape, [8, 8, 8])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), 0.010958677157759666,
            accuracy: 0.00021917354315519335)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), 5.610842704772949,
            accuracy: 0.11221685409545899)
    }

    func testIfftn_3() {
        MLXRandom.seed(119)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.5159510970115662,
            accuracy: 0.010319021940231323)
        XCTAssertEqual(
            r.sum().item(Float.self), 264.1669616699219,
            accuracy: 5.283339233398437)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.5054599046707153,
            accuracy: 0.010109198093414307)
        XCTAssertEqual(
            i.sum().item(Float.self), 258.79547119140625,
            accuracy: 5.175909423828125)
        let c = r + i.asImaginary()
        let result = ifftn(c, s: [10, 5], axes: [2, 1], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 5, 10])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 0.008541149087250233,
            accuracy: 0.00017082298174500465)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 3.416459560394287,
            accuracy: 0.06832919120788575)
        XCTAssertEqual(resultImaginary.shape, [8, 5, 10])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), 0.013507889583706856,
            accuracy: 0.00027015779167413714)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), 5.40315580368042,
            accuracy: 0.1080631160736084)
    }

    func testRfft2_() {
        MLXRandom.seed(722)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.4949501156806946,
            accuracy: 0.009899002313613892)
        XCTAssertEqual(
            r.sum().item(Float.self), 253.41445922851562,
            accuracy: 5.068289184570313)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.4984145760536194,
            accuracy: 0.009968291521072387)
        XCTAssertEqual(
            i.sum().item(Float.self), 255.18826293945312,
            accuracy: 5.103765258789062)
        let c = r + i.asImaginary()
        let result = rfft2(c, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 8, 5])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 0.8082265853881836,
            accuracy: 0.016164531707763673)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 258.63250732421875,
            accuracy: 5.172650146484375)
        XCTAssertEqual(resultImaginary.shape, [8, 8, 5])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), 0.03572067618370056,
            accuracy: 0.0007144135236740113)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), 11.43061637878418,
            accuracy: 0.2286123275756836)
    }

    func testRfft2_1() {
        MLXRandom.seed(225)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.5058765411376953,
            accuracy: 0.010117530822753906)
        XCTAssertEqual(
            r.sum().item(Float.self), 259.0087890625,
            accuracy: 5.18017578125)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.4878406226634979,
            accuracy: 0.009756812453269958)
        XCTAssertEqual(
            i.sum().item(Float.self), 249.77439880371094,
            accuracy: 4.995487976074219)
        let c = r + i.asImaginary()
        let result = rfft2(c, s: [3, 4], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 3, 3])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 0.7214547991752625,
            accuracy: 0.014429095983505249)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 51.94474411010742,
            accuracy: 1.0388948822021484)
        XCTAssertEqual(resultImaginary.shape, [8, 3, 3])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), -0.03948277235031128,
            accuracy: -0.0007896554470062257)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), -2.842759609222412,
            accuracy: -0.05685519218444824)
    }

    func testRfft2_2() {
        MLXRandom.seed(380)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.4951004981994629,
            accuracy: 0.009902009963989258)
        XCTAssertEqual(
            r.sum().item(Float.self), 253.491455078125,
            accuracy: 5.0698291015625)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.4919356107711792,
            accuracy: 0.009838712215423585)
        XCTAssertEqual(
            i.sum().item(Float.self), 251.87103271484375,
            accuracy: 5.037420654296875)
        let c = r + i.asImaginary()
        let result = rfft2(c, axes: [0, 2], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 8, 5])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 0.86641925573349,
            accuracy: 0.0173283851146698)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 277.254150390625,
            accuracy: 5.5450830078125)
        XCTAssertEqual(resultImaginary.shape, [8, 8, 5])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), 0.006711974740028381,
            accuracy: 0.00013423949480056762)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), 2.147831916809082,
            accuracy: 0.04295663833618164)
    }

    func testRfft2_3() {
        MLXRandom.seed(813)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.4799543023109436,
            accuracy: 0.009599086046218872)
        XCTAssertEqual(
            r.sum().item(Float.self), 245.73660278320312,
            accuracy: 4.914732055664063)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.4987284541130066,
            accuracy: 0.009974569082260132)
        XCTAssertEqual(
            i.sum().item(Float.self), 255.34896850585938,
            accuracy: 5.1069793701171875)
        let c = r + i.asImaginary()
        let result = rfft2(c, s: [10, 5], axes: [2, 1], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 3, 10])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 0.7862035036087036,
            accuracy: 0.015724070072174072)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 188.68882751464844,
            accuracy: 3.7737765502929688)
        XCTAssertEqual(resultImaginary.shape, [8, 3, 10])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), 0.11010777205228806,
            accuracy: 0.002202155441045761)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), 26.42586326599121,
            accuracy: 0.5285172653198242)
    }

    func testIrfft2_() {
        MLXRandom.seed(174)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.514319121837616,
            accuracy: 0.01028638243675232)
        XCTAssertEqual(
            r.sum().item(Float.self), 263.3313903808594,
            accuracy: 5.266627807617188)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.5133156776428223,
            accuracy: 0.010266313552856446)
        XCTAssertEqual(
            i.sum().item(Float.self), 262.817626953125,
            accuracy: 5.2563525390625)
        let c = r + i.asImaginary()
        let result = irfft2(c, stream: .cpu)
        XCTAssertEqual(result.shape, [8, 8, 14])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.005966233555227518,
            accuracy: 0.00011932467110455036)
        XCTAssertEqual(
            result.sum().item(Float.self), 5.345745086669922,
            accuracy: 0.10691490173339845)
    }

    func testIrfft2_1() {
        MLXRandom.seed(340)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.5179769992828369,
            accuracy: 0.010359539985656738)
        XCTAssertEqual(
            r.sum().item(Float.self), 265.2042236328125,
            accuracy: 5.30408447265625)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.5126595497131348,
            accuracy: 0.010253190994262695)
        XCTAssertEqual(
            i.sum().item(Float.self), 262.481689453125,
            accuracy: 5.2496337890625)
        let c = r + i.asImaginary()
        let result = irfft2(c, s: [3, 4], stream: .cpu)
        XCTAssertEqual(result.shape, [8, 3, 4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.047055989503860474,
            accuracy: 0.0009411197900772095)
        XCTAssertEqual(
            result.sum().item(Float.self), 4.5173749923706055,
            accuracy: 0.09034749984741211)
    }

    func testIrfft2_2() {
        MLXRandom.seed(436)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.5037882328033447,
            accuracy: 0.010075764656066894)
        XCTAssertEqual(
            r.sum().item(Float.self), 257.9395751953125,
            accuracy: 5.15879150390625)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.5085217356681824,
            accuracy: 0.010170434713363648)
        XCTAssertEqual(
            i.sum().item(Float.self), 260.3631286621094,
            accuracy: 5.207262573242188)
        let c = r + i.asImaginary()
        let result = irfft2(c, axes: [0, 2], stream: .cpu)
        XCTAssertEqual(result.shape, [8, 8, 14])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.004838266409933567,
            accuracy: 9.676532819867134e-05)
        XCTAssertEqual(
            result.sum().item(Float.self), 4.335086345672607,
            accuracy: 0.08670172691345215)
    }

    func testIrfft2_3() {
        MLXRandom.seed(835)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.507753849029541,
            accuracy: 0.010155076980590821)
        XCTAssertEqual(
            r.sum().item(Float.self), 259.969970703125,
            accuracy: 5.1993994140625)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.49466848373413086,
            accuracy: 0.009893369674682618)
        XCTAssertEqual(
            i.sum().item(Float.self), 253.270263671875,
            accuracy: 5.0654052734375)
        let c = r + i.asImaginary()
        let result = irfft2(c, s: [10, 5], axes: [2, 1], stream: .cpu)
        XCTAssertEqual(result.shape, [8, 5, 10])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.013026298955082893,
            accuracy: 0.0002605259791016579)
        XCTAssertEqual(
            result.sum().item(Float.self), 5.210519790649414,
            accuracy: 0.10421039581298829)
    }

    func testRfftn_() {
        MLXRandom.seed(63)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.5128694772720337,
            accuracy: 0.010257389545440674)
        XCTAssertEqual(
            r.sum().item(Float.self), 262.58917236328125,
            accuracy: 5.251783447265625)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.4861868619918823,
            accuracy: 0.009723737239837646)
        XCTAssertEqual(
            i.sum().item(Float.self), 248.92767333984375,
            accuracy: 4.978553466796875)
        let c = r + i.asImaginary()
        let result = rfftn(c, stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 8, 5])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 0.5379745960235596,
            accuracy: 0.010759491920471192)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 172.15187072753906,
            accuracy: 3.443037414550781)
        XCTAssertEqual(resultImaginary.shape, [8, 8, 5])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), 0.12080971151590347,
            accuracy: 0.0024161942303180697)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), 38.65910720825195,
            accuracy: 0.773182144165039)
    }

    func testRfftn_1() {
        MLXRandom.seed(103)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.5262448787689209,
            accuracy: 0.010524897575378419)
        XCTAssertEqual(
            r.sum().item(Float.self), 269.4373779296875,
            accuracy: 5.38874755859375)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.4829203188419342,
            accuracy: 0.009658406376838685)
        XCTAssertEqual(
            i.sum().item(Float.self), 247.2552032470703,
            accuracy: 4.945104064941407)
        let c = r + i.asImaginary()
        let result = rfftn(c, s: [3, 4], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 3, 3])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 0.5502752065658569,
            accuracy: 0.011005504131317139)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 39.619815826416016,
            accuracy: 0.7923963165283203)
        XCTAssertEqual(resultImaginary.shape, [8, 3, 3])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), 0.025733524933457375,
            accuracy: 0.0005146704986691475)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), 1.852813720703125,
            accuracy: 0.0370562744140625)
    }

    func testRfftn_2() {
        MLXRandom.seed(801)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.50965815782547,
            accuracy: 0.010193163156509399)
        XCTAssertEqual(
            r.sum().item(Float.self), 260.9449768066406,
            accuracy: 5.218899536132812)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.5044752955436707,
            accuracy: 0.010089505910873414)
        XCTAssertEqual(
            i.sum().item(Float.self), 258.2913513183594,
            accuracy: 5.165827026367188)
        let c = r + i.asImaginary()
        let result = rfftn(c, axes: [0, 2], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 8, 5])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 0.8939148187637329,
            accuracy: 0.017878296375274657)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 286.052734375,
            accuracy: 5.7210546875)
        XCTAssertEqual(resultImaginary.shape, [8, 8, 5])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), -0.05308229848742485,
            accuracy: -0.001061645969748497)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), -16.98633575439453,
            accuracy: -0.33972671508789065)
    }

    func testRfftn_3() {
        MLXRandom.seed(149)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.5064899921417236,
            accuracy: 0.010129799842834472)
        XCTAssertEqual(
            r.sum().item(Float.self), 259.3228759765625,
            accuracy: 5.18645751953125)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.4949530363082886,
            accuracy: 0.009899060726165771)
        XCTAssertEqual(
            i.sum().item(Float.self), 253.41595458984375,
            accuracy: 5.068319091796875)
        let c = r + i.asImaginary()
        let result = rfftn(c, s: [10, 5], axes: [2, 1], stream: .cpu)
        let resultReal = result.realPart()
        let resultImaginary = result.imaginaryPart()
        XCTAssertEqual(resultReal.shape, [8, 3, 10])
        XCTAssertEqual(resultReal.dtype, .float32)
        XCTAssertEqual(
            resultReal.mean().item(Float.self), 0.7501934170722961,
            accuracy: 0.015003868341445924)
        XCTAssertEqual(
            resultReal.sum().item(Float.self), 180.04641723632812,
            accuracy: 3.6009283447265625)
        XCTAssertEqual(resultImaginary.shape, [8, 3, 10])
        XCTAssertEqual(resultImaginary.dtype, .float32)
        XCTAssertEqual(
            resultImaginary.mean().item(Float.self), -0.039641283452510834,
            accuracy: -0.0007928256690502167)
        XCTAssertEqual(
            resultImaginary.sum().item(Float.self), -9.513907432556152,
            accuracy: -0.19027814865112305)
    }

    func testIrfftn_() {
        MLXRandom.seed(875)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.5080322623252869,
            accuracy: 0.010160645246505737)
        XCTAssertEqual(
            r.sum().item(Float.self), 260.1125183105469,
            accuracy: 5.202250366210937)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.5002621412277222,
            accuracy: 0.010005242824554443)
        XCTAssertEqual(
            i.sum().item(Float.self), 256.13421630859375,
            accuracy: 5.122684326171875)
        let c = r + i.asImaginary()
        let result = irfftn(c, stream: .cpu)
        XCTAssertEqual(result.shape, [8, 8, 14])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 9.236017649527639e-05,
            accuracy: 1.8472035299055278e-06)
        XCTAssertEqual(
            result.sum().item(Float.self), 0.0827547162771225,
            accuracy: 0.00165509432554245)
    }

    func testIrfftn_1() {
        MLXRandom.seed(714)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.49393296241760254,
            accuracy: 0.00987865924835205)
        XCTAssertEqual(
            r.sum().item(Float.self), 252.8936767578125,
            accuracy: 5.05787353515625)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.5138311386108398,
            accuracy: 0.010276622772216797)
        XCTAssertEqual(
            i.sum().item(Float.self), 263.08154296875,
            accuracy: 5.261630859375)
        let c = r + i.asImaginary()
        let result = irfftn(c, s: [3, 4], stream: .cpu)
        XCTAssertEqual(result.shape, [8, 3, 4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.041039690375328064,
            accuracy: 0.0008207938075065613)
        XCTAssertEqual(
            result.sum().item(Float.self), 3.939810276031494,
            accuracy: 0.07879620552062988)
    }

    func testIrfftn_2() {
        MLXRandom.seed(224)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.5111634731292725,
            accuracy: 0.01022326946258545)
        XCTAssertEqual(
            r.sum().item(Float.self), 261.7156982421875,
            accuracy: 5.23431396484375)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.49477437138557434,
            accuracy: 0.009895487427711487)
        XCTAssertEqual(
            i.sum().item(Float.self), 253.32447814941406,
            accuracy: 5.066489562988282)
        let c = r + i.asImaginary()
        let result = irfftn(c, axes: [0, 2], stream: .cpu)
        XCTAssertEqual(result.shape, [8, 8, 14])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.00553929852321744,
            accuracy: 0.00011078597046434879)
        XCTAssertEqual(
            result.sum().item(Float.self), 4.9632110595703125,
            accuracy: 0.09926422119140625)
    }

    func testIrfftn_3() {
        MLXRandom.seed(46)
        let r = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(r.shape, [8, 8, 8])
        XCTAssertEqual(r.dtype, .float32)
        XCTAssertEqual(
            r.mean().item(Float.self), 0.5066219568252563,
            accuracy: 0.010132439136505127)
        XCTAssertEqual(
            r.sum().item(Float.self), 259.39044189453125,
            accuracy: 5.187808837890625)
        let i = MLXRandom.uniform(0.0 ..< 1.0, [8, 8, 8])
        XCTAssertEqual(i.shape, [8, 8, 8])
        XCTAssertEqual(i.dtype, .float32)
        XCTAssertEqual(
            i.mean().item(Float.self), 0.5006622076034546,
            accuracy: 0.010013244152069093)
        XCTAssertEqual(
            i.sum().item(Float.self), 256.33905029296875,
            accuracy: 5.1267810058593755)
        let c = r + i.asImaginary()
        let result = irfftn(c, s: [10, 5], axes: [2, 1], stream: .cpu)
        XCTAssertEqual(result.shape, [8, 5, 10])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.010128638707101345,
            accuracy: 0.00020257277414202692)
        XCTAssertEqual(
            result.sum().item(Float.self), 4.051455497741699,
            accuracy: 0.08102910995483399)
    }

    func testSGD() {
        MLXRandom.seed(836)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.07495629787445068,
            accuracy: 0.0014991259574890137)
        XCTAssertEqual(
            a.sum().item(Float.self), 0.8994755148887634,
            accuracy: 0.01798951029777527)
        let aGrad = MLXRandom.normal([4, 3])
        XCTAssertEqual(aGrad.shape, [4, 3])
        XCTAssertEqual(aGrad.dtype, .float32)
        XCTAssertEqual(
            aGrad.mean().item(Float.self), 0.09326401352882385,
            accuracy: 0.001865280270576477)
        XCTAssertEqual(
            aGrad.sum().item(Float.self), 1.1191681623458862,
            accuracy: 0.022383363246917726)
        let aModel = ModuleParameters(values: ["a": .value(a)])
        let aGradParams = ModuleParameters(values: ["a": .value(aGrad)])
        let result = SGD(learningRate: 0.1).apply(gradients: aGradParams, modelParameters: aModel)
        XCTAssertEqual(result[unwrapping: "a"]!.shape, [4, 3])
        XCTAssertEqual(result[unwrapping: "a"]!.dtype, .float32)
        XCTAssertEqual(
            result[unwrapping: "a"]!.mean().item(Float.self), 0.06562991440296173,
            accuracy: 0.0013125982880592346)
        XCTAssertEqual(
            result[unwrapping: "a"]!.sum().item(Float.self), 0.787558913230896,
            accuracy: 0.01575117826461792)
    }

    func testSGD1() {
        MLXRandom.seed(587)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.10747849941253662,
            accuracy: -0.0021495699882507326)
        XCTAssertEqual(
            a.sum().item(Float.self), -1.2897419929504395,
            accuracy: -0.02579483985900879)
        let aGrad = MLXRandom.normal([4, 3])
        XCTAssertEqual(aGrad.shape, [4, 3])
        XCTAssertEqual(aGrad.dtype, .float32)
        XCTAssertEqual(
            aGrad.mean().item(Float.self), -0.32190611958503723,
            accuracy: -0.006438122391700745)
        XCTAssertEqual(
            aGrad.sum().item(Float.self), -3.8628733158111572,
            accuracy: -0.07725746631622314)
        let aModel = ModuleParameters(values: ["a": .value(a)])
        let aGradParams = ModuleParameters(values: ["a": .value(aGrad)])
        let result = SGD(learningRate: 0.1, momentum: 0.1).apply(
            gradients: aGradParams, modelParameters: aModel)
        XCTAssertEqual(result[unwrapping: "a"]!.shape, [4, 3])
        XCTAssertEqual(result[unwrapping: "a"]!.dtype, .float32)
        XCTAssertEqual(
            result[unwrapping: "a"]!.mean().item(Float.self), -0.07528789341449738,
            accuracy: -0.0015057578682899475)
        XCTAssertEqual(
            result[unwrapping: "a"]!.sum().item(Float.self), -0.9034546613693237,
            accuracy: -0.018069093227386476)
    }

    func testSGD2() {
        MLXRandom.seed(649)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.7766839861869812,
            accuracy: 0.015533679723739624)
        XCTAssertEqual(
            a.sum().item(Float.self), 9.320207595825195,
            accuracy: 0.18640415191650392)
        let aGrad = MLXRandom.normal([4, 3])
        XCTAssertEqual(aGrad.shape, [4, 3])
        XCTAssertEqual(aGrad.dtype, .float32)
        XCTAssertEqual(
            aGrad.mean().item(Float.self), 0.06737084686756134,
            accuracy: 0.0013474169373512267)
        XCTAssertEqual(
            aGrad.sum().item(Float.self), 0.8084501028060913,
            accuracy: 0.016169002056121828)
        let aModel = ModuleParameters(values: ["a": .value(a)])
        let aGradParams = ModuleParameters(values: ["a": .value(aGrad)])
        let result = SGD(learningRate: 0.1, momentum: 0.1, dampening: 0.1).apply(
            gradients: aGradParams, modelParameters: aModel)
        XCTAssertEqual(result[unwrapping: "a"]!.shape, [4, 3])
        XCTAssertEqual(result[unwrapping: "a"]!.dtype, .float32)
        XCTAssertEqual(
            result[unwrapping: "a"]!.mean().item(Float.self), 0.7706205248832703,
            accuracy: 0.015412410497665405)
        XCTAssertEqual(
            result[unwrapping: "a"]!.sum().item(Float.self), 9.247446060180664,
            accuracy: 0.18494892120361328)
    }

    func testRMSprop() {
        MLXRandom.seed(931)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.22450898587703705,
            accuracy: -0.004490179717540741)
        XCTAssertEqual(
            a.sum().item(Float.self), -2.6941077709198,
            accuracy: -0.053882155418396)
        let aGrad = MLXRandom.normal([4, 3])
        XCTAssertEqual(aGrad.shape, [4, 3])
        XCTAssertEqual(aGrad.dtype, .float32)
        XCTAssertEqual(
            aGrad.mean().item(Float.self), 0.24865484237670898,
            accuracy: 0.00497309684753418)
        XCTAssertEqual(
            aGrad.sum().item(Float.self), 2.983858108520508,
            accuracy: 0.05967716217041016)
        let aModel = ModuleParameters(values: ["a": .value(a)])
        let aGradParams = ModuleParameters(values: ["a": .value(aGrad)])
        let result = RMSprop(learningRate: 0.1).apply(
            gradients: aGradParams, modelParameters: aModel)
        XCTAssertEqual(result[unwrapping: "a"]!.shape, [4, 3])
        XCTAssertEqual(result[unwrapping: "a"]!.dtype, .float32)
        XCTAssertEqual(
            result[unwrapping: "a"]!.mean().item(Float.self), -0.22450922429561615,
            accuracy: -0.004490184485912323)
        XCTAssertEqual(
            result[unwrapping: "a"]!.sum().item(Float.self), -2.694110631942749,
            accuracy: -0.05388221263885498)
    }

    func testAdagrad() {
        MLXRandom.seed(958)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.04584333300590515,
            accuracy: -0.0009168666601181031)
        XCTAssertEqual(
            a.sum().item(Float.self), -0.5501199960708618,
            accuracy: -0.011002399921417237)
        let aGrad = MLXRandom.normal([4, 3])
        XCTAssertEqual(aGrad.shape, [4, 3])
        XCTAssertEqual(aGrad.dtype, .float32)
        XCTAssertEqual(
            aGrad.mean().item(Float.self), 0.23250393569469452,
            accuracy: 0.00465007871389389)
        XCTAssertEqual(
            aGrad.sum().item(Float.self), 2.7900471687316895,
            accuracy: 0.05580094337463379)
        let aModel = ModuleParameters(values: ["a": .value(a)])
        let aGradParams = ModuleParameters(values: ["a": .value(aGrad)])
        let result = AdaGrad(learningRate: 0.1).apply(
            gradients: aGradParams, modelParameters: aModel)
        XCTAssertEqual(result[unwrapping: "a"]!.shape, [4, 3])
        XCTAssertEqual(result[unwrapping: "a"]!.dtype, .float32)
        XCTAssertEqual(
            result[unwrapping: "a"]!.mean().item(Float.self), -0.06250998377799988,
            accuracy: -0.0012501996755599975)
        XCTAssertEqual(
            result[unwrapping: "a"]!.sum().item(Float.self), -0.7501198053359985,
            accuracy: -0.01500239610671997)
    }

    func testAdaDelta() {
        MLXRandom.seed(547)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.3483370244503021,
            accuracy: -0.006966740489006043)
        XCTAssertEqual(
            a.sum().item(Float.self), -4.180044174194336,
            accuracy: -0.08360088348388672)
        let aGrad = MLXRandom.normal([4, 3])
        XCTAssertEqual(aGrad.shape, [4, 3])
        XCTAssertEqual(aGrad.dtype, .float32)
        XCTAssertEqual(
            aGrad.mean().item(Float.self), 0.5226783752441406,
            accuracy: 0.010453567504882813)
        XCTAssertEqual(
            aGrad.sum().item(Float.self), 6.272140026092529,
            accuracy: 0.12544280052185058)
        let aModel = ModuleParameters(values: ["a": .value(a)])
        let aGradParams = ModuleParameters(values: ["a": .value(aGrad)])
        let result = AdaDelta(learningRate: 0.1).apply(
            gradients: aGradParams, modelParameters: aModel)
        XCTAssertEqual(result[unwrapping: "a"]!.shape, [4, 3])
        XCTAssertEqual(result[unwrapping: "a"]!.dtype, .float32)
        XCTAssertEqual(
            result[unwrapping: "a"]!.mean().item(Float.self), -0.348442405462265,
            accuracy: -0.0069688481092453)
        XCTAssertEqual(
            result[unwrapping: "a"]!.sum().item(Float.self), -4.181308746337891,
            accuracy: -0.08362617492675782)
    }

    func testAdam() {
        MLXRandom.seed(616)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.1122930571436882,
            accuracy: 0.002245861142873764)
        XCTAssertEqual(
            a.sum().item(Float.self), 1.347516655921936,
            accuracy: 0.02695033311843872)
        let aGrad = MLXRandom.normal([4, 3])
        XCTAssertEqual(aGrad.shape, [4, 3])
        XCTAssertEqual(aGrad.dtype, .float32)
        XCTAssertEqual(
            aGrad.mean().item(Float.self), 0.305597722530365,
            accuracy: 0.0061119544506073)
        XCTAssertEqual(
            aGrad.sum().item(Float.self), 3.66717267036438,
            accuracy: 0.0733434534072876)
        let aModel = ModuleParameters(values: ["a": .value(a)])
        let aGradParams = ModuleParameters(values: ["a": .value(aGrad)])
        let result = Adam(learningRate: 0.1).apply(gradients: aGradParams, modelParameters: aModel)
        XCTAssertEqual(result[unwrapping: "a"]!.shape, [4, 3])
        XCTAssertEqual(result[unwrapping: "a"]!.dtype, .float32)
        XCTAssertEqual(
            result[unwrapping: "a"]!.mean().item(Float.self), 0.11229278147220612,
            accuracy: 0.0022458556294441224)
        XCTAssertEqual(
            result[unwrapping: "a"]!.sum().item(Float.self), 1.3475133180618286,
            accuracy: 0.026950266361236572)
    }

    func testAdamW() {
        MLXRandom.seed(696)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.3633918762207031,
            accuracy: -0.007267837524414063)
        XCTAssertEqual(
            a.sum().item(Float.self), -4.3607025146484375,
            accuracy: -0.08721405029296875)
        let aGrad = MLXRandom.normal([4, 3])
        XCTAssertEqual(aGrad.shape, [4, 3])
        XCTAssertEqual(aGrad.dtype, .float32)
        XCTAssertEqual(
            aGrad.mean().item(Float.self), 0.22175447642803192,
            accuracy: 0.0044350895285606385)
        XCTAssertEqual(
            aGrad.sum().item(Float.self), 2.6610536575317383,
            accuracy: 0.05322107315063477)
        let aModel = ModuleParameters(values: ["a": .value(a)])
        let aGradParams = ModuleParameters(values: ["a": .value(aGrad)])
        let result = AdamW(learningRate: 0.1).apply(gradients: aGradParams, modelParameters: aModel)
        XCTAssertEqual(result[unwrapping: "a"]!.shape, [4, 3])
        XCTAssertEqual(result[unwrapping: "a"]!.dtype, .float32)
        XCTAssertEqual(
            result[unwrapping: "a"]!.mean().item(Float.self), -0.4684376120567322,
            accuracy: -0.009368752241134645)
        XCTAssertEqual(
            result[unwrapping: "a"]!.sum().item(Float.self), -5.621251106262207,
            accuracy: -0.11242502212524415)
    }

    func testAdamax() {
        MLXRandom.seed(75)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.3039236068725586,
            accuracy: -0.006078472137451172)
        XCTAssertEqual(
            a.sum().item(Float.self), -3.647083282470703,
            accuracy: -0.07294166564941407)
        let aGrad = MLXRandom.normal([4, 3])
        XCTAssertEqual(aGrad.shape, [4, 3])
        XCTAssertEqual(aGrad.dtype, .float32)
        XCTAssertEqual(
            aGrad.mean().item(Float.self), -0.24271723628044128,
            accuracy: -0.004854344725608826)
        XCTAssertEqual(
            aGrad.sum().item(Float.self), -2.912606716156006,
            accuracy: -0.05825213432312012)
        let aModel = ModuleParameters(values: ["a": .value(a)])
        let aGradParams = ModuleParameters(values: ["a": .value(aGrad)])
        let result = Adamax(learningRate: 0.1).apply(
            gradients: aGradParams, modelParameters: aModel)
        XCTAssertEqual(result[unwrapping: "a"]!.shape, [4, 3])
        XCTAssertEqual(result[unwrapping: "a"]!.dtype, .float32)
        XCTAssertEqual(
            result[unwrapping: "a"]!.mean().item(Float.self), -0.3039236068725586,
            accuracy: -0.006078472137451172)
        XCTAssertEqual(
            result[unwrapping: "a"]!.sum().item(Float.self), -3.647083282470703,
            accuracy: -0.07294166564941407)
    }

    func testLion() {
        MLXRandom.seed(27)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.1776922345161438,
            accuracy: 0.003553844690322876)
        XCTAssertEqual(
            a.sum().item(Float.self), 2.1323068141937256,
            accuracy: 0.042646136283874515)
        let aGrad = MLXRandom.normal([4, 3])
        XCTAssertEqual(aGrad.shape, [4, 3])
        XCTAssertEqual(aGrad.dtype, .float32)
        XCTAssertEqual(
            aGrad.mean().item(Float.self), -0.02118723653256893,
            accuracy: -0.00042374473065137863)
        XCTAssertEqual(
            aGrad.sum().item(Float.self), -0.2542468309402466,
            accuracy: -0.005084936618804932)
        let aModel = ModuleParameters(values: ["a": .value(a)])
        let aGradParams = ModuleParameters(values: ["a": .value(aGrad)])
        let result = Lion(learningRate: 0.1).apply(gradients: aGradParams, modelParameters: aModel)
        XCTAssertEqual(result[unwrapping: "a"]!.shape, [4, 3])
        XCTAssertEqual(result[unwrapping: "a"]!.dtype, .float32)
        XCTAssertEqual(
            result[unwrapping: "a"]!.mean().item(Float.self), 0.21102556586265564,
            accuracy: 0.004220511317253113)
        XCTAssertEqual(
            result[unwrapping: "a"]!.sum().item(Float.self), 2.532306671142578,
            accuracy: 0.05064613342285156)
    }

    func testLion1() {
        MLXRandom.seed(127)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.18461060523986816,
            accuracy: -0.0036922121047973633)
        XCTAssertEqual(
            a.sum().item(Float.self), -2.215327262878418,
            accuracy: -0.04430654525756836)
        let aGrad = MLXRandom.normal([4, 3])
        XCTAssertEqual(aGrad.shape, [4, 3])
        XCTAssertEqual(aGrad.dtype, .float32)
        XCTAssertEqual(
            aGrad.mean().item(Float.self), -0.03600400686264038,
            accuracy: -0.0007200801372528076)
        XCTAssertEqual(
            aGrad.sum().item(Float.self), -0.43204808235168457,
            accuracy: -0.008640961647033691)
        let aModel = ModuleParameters(values: ["a": .value(a)])
        let aGradParams = ModuleParameters(values: ["a": .value(aGrad)])
        let result = Lion(learningRate: 0.1, weightDecay: 0.1).apply(
            gradients: aGradParams, modelParameters: aModel)
        XCTAssertEqual(result[unwrapping: "a"]!.shape, [4, 3])
        XCTAssertEqual(result[unwrapping: "a"]!.dtype, .float32)
        XCTAssertEqual(
            result[unwrapping: "a"]!.mean().item(Float.self), -0.18276450037956238,
            accuracy: -0.003655290007591248)
        XCTAssertEqual(
            result[unwrapping: "a"]!.sum().item(Float.self), -2.193173885345459,
            accuracy: -0.04386347770690918)
    }

    func testAdafactor() {
        MLXRandom.seed(650)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), -0.5207136869430542,
            accuracy: -0.010414273738861083)
        XCTAssertEqual(
            a.sum().item(Float.self), -6.248563766479492,
            accuracy: -0.12497127532958985)
        let aGrad = MLXRandom.normal([4, 3])
        XCTAssertEqual(aGrad.shape, [4, 3])
        XCTAssertEqual(aGrad.dtype, .float32)
        XCTAssertEqual(
            aGrad.mean().item(Float.self), 0.4333036541938782,
            accuracy: 0.008666073083877564)
        XCTAssertEqual(
            aGrad.sum().item(Float.self), 5.199643611907959,
            accuracy: 0.10399287223815919)
        let aModel = ModuleParameters(values: ["a": .value(a)])
        let aGradParams = ModuleParameters(values: ["a": .value(aGrad)])
        let result = Adafactor(learningRate: 0.1).apply(
            gradients: aGradParams, modelParameters: aModel)
        XCTAssertEqual(result[unwrapping: "a"]!.shape, [4, 3])
        XCTAssertEqual(result[unwrapping: "a"]!.dtype, .float32)
        XCTAssertEqual(
            result[unwrapping: "a"]!.mean().item(Float.self), -0.5268284678459167,
            accuracy: -0.010536569356918336)
        XCTAssertEqual(
            result[unwrapping: "a"]!.sum().item(Float.self), -6.321941375732422,
            accuracy: -0.12643882751464844)
    }

    func testAdafactor1() {
        MLXRandom.seed(193)
        let a = MLXRandom.normal([4, 3])
        XCTAssertEqual(a.shape, [4, 3])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.4008181691169739,
            accuracy: 0.008016363382339478)
        XCTAssertEqual(
            a.sum().item(Float.self), 4.809817790985107,
            accuracy: 0.09619635581970215)
        let aGrad = MLXRandom.normal([4, 3])
        XCTAssertEqual(aGrad.shape, [4, 3])
        XCTAssertEqual(aGrad.dtype, .float32)
        XCTAssertEqual(
            aGrad.mean().item(Float.self), 0.21447472274303436,
            accuracy: 0.004289494454860688)
        XCTAssertEqual(
            aGrad.sum().item(Float.self), 2.5736966133117676,
            accuracy: 0.05147393226623535)
        let aModel = ModuleParameters(values: ["a": .value(a)])
        let aGradParams = ModuleParameters(values: ["a": .value(aGrad)])
        let result = Adafactor(learningRate: 0.1, beta1: 0.1).apply(
            gradients: aGradParams, modelParameters: aModel)
        XCTAssertEqual(result[unwrapping: "a"]!.shape, [4, 3])
        XCTAssertEqual(result[unwrapping: "a"]!.dtype, .float32)
        XCTAssertEqual(
            result[unwrapping: "a"]!.mean().item(Float.self), 0.39943069219589233,
            accuracy: 0.007988613843917847)
        XCTAssertEqual(
            result[unwrapping: "a"]!.sum().item(Float.self), 4.793168067932129,
            accuracy: 0.09586336135864258)
    }

    func testAdafactor2() {
        MLXRandom.seed(620)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [10])
        XCTAssertEqual(a.shape, [10])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.4890245497226715,
            accuracy: 0.00978049099445343)
        XCTAssertEqual(
            a.sum().item(Float.self), 4.89024543762207,
            accuracy: 0.09780490875244141)
        let aGrad = MLXRandom.uniform(0.0 ..< 1.0, [10])
        XCTAssertEqual(aGrad.shape, [10])
        XCTAssertEqual(aGrad.dtype, .float32)
        XCTAssertEqual(
            aGrad.mean().item(Float.self), 0.6818901896476746,
            accuracy: 0.013637803792953491)
        XCTAssertEqual(
            aGrad.sum().item(Float.self), 6.818902015686035,
            accuracy: 0.1363780403137207)
        let aModel = ModuleParameters(values: ["a": .value(a)])
        let aGradParams = ModuleParameters(values: ["a": .value(aGrad)])
        let result = Adafactor(learningRate: 0.1).apply(
            gradients: aGradParams, modelParameters: aModel)
        XCTAssertEqual(result[unwrapping: "a"]!.shape, [10])
        XCTAssertEqual(result[unwrapping: "a"]!.dtype, .float32)
        XCTAssertEqual(
            result[unwrapping: "a"]!.mean().item(Float.self), 0.4835330545902252,
            accuracy: 0.009670661091804504)
        XCTAssertEqual(
            result[unwrapping: "a"]!.sum().item(Float.self), 4.835330486297607,
            accuracy: 0.09670660972595214)
    }

    func testGLU() {
        MLXRandom.seed(850)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.5472526550292969,
            accuracy: 0.010945053100585937)
        XCTAssertEqual(
            a.sum().item(Float.self), 140.0966796875,
            accuracy: 2.80193359375)
        let result = GLU()(a)
        XCTAssertEqual(result.shape, [2, 8, 8])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.33327674865722656,
            accuracy: 0.006665534973144531)
        XCTAssertEqual(
            result.sum().item(Float.self), 42.659423828125,
            accuracy: 0.8531884765625)
    }

    func testSigmoid1() {
        MLXRandom.seed(589)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.5296978950500488,
            accuracy: 0.010593957901000976)
        XCTAssertEqual(
            a.sum().item(Float.self), 135.6026611328125,
            accuracy: 2.71205322265625)
        let result = Sigmoid()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.6270139813423157,
            accuracy: 0.012540279626846314)
        XCTAssertEqual(
            result.sum().item(Float.self), 160.5155792236328,
            accuracy: 3.2103115844726564)
    }

    func testMish() {
        MLXRandom.seed(122)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.5017197728157043,
            accuracy: 0.010034395456314087)
        XCTAssertEqual(
            a.sum().item(Float.self), 128.4402618408203,
            accuracy: 2.5688052368164063)
        let result = Mish()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.39537572860717773,
            accuracy: 0.007907514572143556)
        XCTAssertEqual(
            result.sum().item(Float.self), 101.2161865234375,
            accuracy: 2.0243237304687502)
    }

    func testReLU() {
        MLXRandom.seed(400)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.47832274436950684,
            accuracy: 0.009566454887390137)
        XCTAssertEqual(
            a.sum().item(Float.self), 122.45062255859375,
            accuracy: 2.449012451171875)
        let result = ReLU()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.47832274436950684,
            accuracy: 0.009566454887390137)
        XCTAssertEqual(
            result.sum().item(Float.self), 122.45062255859375,
            accuracy: 2.449012451171875)
    }

    func testLeakyReLU() {
        MLXRandom.seed(93)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.4999306797981262,
            accuracy: 0.009998613595962524)
        XCTAssertEqual(
            a.sum().item(Float.self), 127.98225402832031,
            accuracy: 2.559645080566406)
        let result = LeakyReLU()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.4999306797981262,
            accuracy: 0.009998613595962524)
        XCTAssertEqual(
            result.sum().item(Float.self), 127.98225402832031,
            accuracy: 2.559645080566406)
    }

    func testReLU6() {
        MLXRandom.seed(379)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.49325865507125854,
            accuracy: 0.009865173101425172)
        XCTAssertEqual(
            a.sum().item(Float.self), 126.27421569824219,
            accuracy: 2.525484313964844)
        let result = ReLU6()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.49325865507125854,
            accuracy: 0.009865173101425172)
        XCTAssertEqual(
            result.sum().item(Float.self), 126.27421569824219,
            accuracy: 2.525484313964844)
    }

    func testSoftmax() {
        MLXRandom.seed(853)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.5143963098526001,
            accuracy: 0.010287926197052003)
        XCTAssertEqual(
            a.sum().item(Float.self), 131.68545532226562,
            accuracy: 2.6337091064453126)
        let result = SoftMax()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.0624999962747097,
            accuracy: 0.001249999925494194)
        XCTAssertEqual(
            result.sum().item(Float.self), 15.999999046325684,
            accuracy: 0.31999998092651366)
    }

    func testSoftplus() {
        MLXRandom.seed(118)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.49898141622543335,
            accuracy: 0.009979628324508667)
        XCTAssertEqual(
            a.sum().item(Float.self), 127.73924255371094,
            accuracy: 2.554784851074219)
        let result = SoftPlus()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.9828577637672424,
            accuracy: 0.01965715527534485)
        XCTAssertEqual(
            result.sum().item(Float.self), 251.61158752441406,
            accuracy: 5.032231750488282)
    }

    func testSoftsign() {
        MLXRandom.seed(37)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.5065512657165527,
            accuracy: 0.010131025314331054)
        XCTAssertEqual(
            a.sum().item(Float.self), 129.6771240234375,
            accuracy: 2.59354248046875)
        let result = SoftSign()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.314089834690094,
            accuracy: 0.00628179669380188)
        XCTAssertEqual(
            result.sum().item(Float.self), 80.40699768066406,
            accuracy: 1.6081399536132812)
    }

    func testCELU() {
        MLXRandom.seed(620)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.4667481780052185,
            accuracy: 0.00933496356010437)
        XCTAssertEqual(
            a.sum().item(Float.self), 119.48753356933594,
            accuracy: 2.389750671386719)
        let result = CELU()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.4667481780052185,
            accuracy: 0.00933496356010437)
        XCTAssertEqual(
            result.sum().item(Float.self), 119.48753356933594,
            accuracy: 2.389750671386719)
    }

    func testSiLU() {
        MLXRandom.seed(22)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.5029705762863159,
            accuracy: 0.010059411525726319)
        XCTAssertEqual(
            a.sum().item(Float.self), 128.76046752929688,
            accuracy: 2.5752093505859377)
        let result = SiLU()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.3319709300994873,
            accuracy: 0.0066394186019897465)
        XCTAssertEqual(
            result.sum().item(Float.self), 84.98455810546875,
            accuracy: 1.699691162109375)
    }

    func testLogSoftmax() {
        MLXRandom.seed(199)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.527843713760376,
            accuracy: 0.010556874275207519)
        XCTAssertEqual(
            a.sum().item(Float.self), 135.12799072265625,
            accuracy: 2.702559814453125)
        let result = LogSoftMax()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -2.8109545707702637,
            accuracy: -0.05621909141540527)
        XCTAssertEqual(
            result.sum().item(Float.self), -719.6043701171875,
            accuracy: -14.39208740234375)
    }

    func testLogSigmoid() {
        MLXRandom.seed(984)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.5109776854515076,
            accuracy: 0.010219553709030152)
        XCTAssertEqual(
            a.sum().item(Float.self), 130.81028747558594,
            accuracy: 2.616205749511719)
        let result = LogSigmoid()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.4795985519886017,
            accuracy: -0.009591971039772034)
        XCTAssertEqual(
            result.sum().item(Float.self), -122.77722930908203,
            accuracy: -2.4555445861816407)
    }

    func testPReLU() {
        MLXRandom.seed(993)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.49665144085884094,
            accuracy: 0.00993302881717682)
        XCTAssertEqual(
            a.sum().item(Float.self), 127.14276885986328,
            accuracy: 2.5428553771972657)
        let result = PReLU()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.49665144085884094,
            accuracy: 0.00993302881717682)
        XCTAssertEqual(
            result.sum().item(Float.self), 127.14276885986328,
            accuracy: 2.5428553771972657)
    }

    func testGELU() {
        MLXRandom.seed(189)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.49295032024383545,
            accuracy: 0.009859006404876709)
        XCTAssertEqual(
            a.sum().item(Float.self), 126.19528198242188,
            accuracy: 2.5239056396484374)
        let result = GELU()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.3656383752822876,
            accuracy: 0.007312767505645752)
        XCTAssertEqual(
            result.sum().item(Float.self), 93.60342407226562,
            accuracy: 1.8720684814453126)
    }

    func testTanh1() {
        MLXRandom.seed(735)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.47412270307540894,
            accuracy: 0.009482454061508178)
        XCTAssertEqual(
            a.sum().item(Float.self), 121.37541198730469,
            accuracy: 2.4275082397460936)
        let result = Tanh()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.4130796790122986,
            accuracy: 0.008261593580245972)
        XCTAssertEqual(
            result.sum().item(Float.self), 105.74839782714844,
            accuracy: 2.114967956542969)
    }

    func testHardswish() {
        MLXRandom.seed(126)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.4918924570083618,
            accuracy: 0.009837849140167236)
        XCTAssertEqual(
            a.sum().item(Float.self), 125.92446899414062,
            accuracy: 2.5184893798828125)
        let result = HardSwish()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.2996022403240204,
            accuracy: 0.005992044806480408)
        XCTAssertEqual(
            result.sum().item(Float.self), 76.69817352294922,
            accuracy: 1.5339634704589844)
    }

    func testStep() {
        MLXRandom.seed(490)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.4793606400489807,
            accuracy: 0.009587212800979614)
        XCTAssertEqual(
            a.sum().item(Float.self), 122.71632385253906,
            accuracy: 2.454326477050781)
        let result = Step()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .int32)
        XCTAssertEqual(
            result.mean().item(Float.self), 1.0,
            accuracy: 0.02)
        XCTAssertEqual(
            result.sum().item(Float.self), 256,
            accuracy: 5.12)
    }

    func testSELU() {
        MLXRandom.seed(215)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.4930267930030823,
            accuracy: 0.009860535860061645)
        XCTAssertEqual(
            a.sum().item(Float.self), 126.21485900878906,
            accuracy: 2.524297180175781)
        let result = SELU()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.5180231928825378,
            accuracy: 0.010360463857650756)
        XCTAssertEqual(
            result.sum().item(Float.self), 132.6139373779297,
            accuracy: 2.6522787475585936)
    }

    func testLinear() {
        MLXRandom.seed(744)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.5086885690689087,
            accuracy: 0.010173771381378174)
        XCTAssertEqual(
            a.sum().item(Float.self), 130.22427368164062,
            accuracy: 2.6044854736328125)
        let result = Linear(16, 5)(a)
        XCTAssertEqual(result.shape, [2, 8, 5])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.10419309139251709,
            accuracy: 0.002083861827850342)
        XCTAssertEqual(
            result.sum().item(Float.self), 8.335447311401367,
            accuracy: 0.16670894622802734)
    }

    func testConv1d1() {
        MLXRandom.seed(819)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.512987494468689,
            accuracy: 0.01025974988937378)
        XCTAssertEqual(
            a.sum().item(Float.self), 131.32479858398438,
            accuracy: 2.6264959716796876)
        let result = Conv1d(inputChannels: 16, outputChannels: 2, kernelSize: 8)(a)
        XCTAssertEqual(result.shape, [2, 1, 2])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.2648651897907257,
            accuracy: 0.005297303795814514)
        XCTAssertEqual(
            result.sum().item(Float.self), 1.0594607591629028,
            accuracy: 0.021189215183258055)
    }

    func testConv2d1() {
        MLXRandom.seed(62)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 8, 4])
        XCTAssertEqual(a.shape, [2, 8, 8, 4])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.5225042700767517,
            accuracy: 0.010450085401535034)
        XCTAssertEqual(
            a.sum().item(Float.self), 267.5221862792969,
            accuracy: 5.350443725585937)
        let result = Conv2d(inputChannels: 4, outputChannels: 2, kernelSize: 8)(a)
        XCTAssertEqual(result.shape, [2, 1, 1, 2])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.27932149171829224,
            accuracy: -0.005586429834365845)
        XCTAssertEqual(
            result.sum().item(Float.self), -1.117285966873169,
            accuracy: -0.02234571933746338)
    }

    func testDropout() {
        MLXRandom.seed(959)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.5114291906356812,
            accuracy: 0.010228583812713623)
        XCTAssertEqual(
            a.sum().item(Float.self), 130.92587280273438,
            accuracy: 2.6185174560546876)
        let result = Dropout()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.47791361808776855,
            accuracy: 0.009558272361755372)
        XCTAssertEqual(
            result.sum().item(Float.self), 122.34588623046875,
            accuracy: 2.446917724609375)
    }

    func testDropout2d() {
        MLXRandom.seed(695)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.4578399062156677,
            accuracy: 0.009156798124313355)
        XCTAssertEqual(
            a.sum().item(Float.self), 117.20701599121094,
            accuracy: 2.344140319824219)
        let result = Dropout2d()(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.36828434467315674,
            accuracy: 0.007365686893463135)
        XCTAssertEqual(
            result.sum().item(Float.self), 94.28079223632812,
            accuracy: 1.8856158447265625)
    }

    func testDropout3d() {
        MLXRandom.seed(23)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 8, 4])
        XCTAssertEqual(a.shape, [2, 8, 8, 4])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.5006061792373657,
            accuracy: 0.010012123584747314)
        XCTAssertEqual(
            a.sum().item(Float.self), 256.31036376953125,
            accuracy: 5.126207275390625)
        let result = Dropout3d()(a)
        XCTAssertEqual(result.shape, [2, 8, 8, 4])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.23728415369987488,
            accuracy: 0.004745683073997498)
        XCTAssertEqual(
            result.sum().item(Float.self), 121.48948669433594,
            accuracy: 2.429789733886719)
    }

    func testEmbedding() {
        MLXRandom.seed(557)
        let a = MLXRandom.randInt(low: 0, high: 10, [2, 8, 8, 4])
        XCTAssertEqual(a.shape, [2, 8, 8, 4])
        XCTAssertEqual(a.dtype, .int32)
        XCTAssertEqual(
            a.mean().item(Float.self), 4.60546875,
            accuracy: 0.09210937500000001)
        XCTAssertEqual(
            a.sum().item(Float.self), 2358,
            accuracy: 47.160000000000004)
        let result = Embedding(embeddingCount: 10, dimensions: 8)(a)
        XCTAssertEqual(result.shape, [2, 8, 8, 4, 8])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.0011973462533205748,
            accuracy: -2.3946925066411497e-05)
        XCTAssertEqual(
            result.sum().item(Float.self), -4.904330253601074,
            accuracy: -0.0980866050720215)
    }

    func testInstanceNorm() {
        MLXRandom.seed(435)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.5000646114349365,
            accuracy: 0.01000129222869873)
        XCTAssertEqual(
            a.sum().item(Float.self), 128.01654052734375,
            accuracy: 2.560330810546875)
        let result = InstanceNorm(dimensions: 8)(a)[0, 0]
        XCTAssertEqual(result.shape, [16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.10645411163568497,
            accuracy: 0.0021290822327136995)
        XCTAssertEqual(
            result.sum().item(Float.self), 1.7032657861709595,
            accuracy: 0.03406531572341919)
    }

    func testLayerNorm() {
        MLXRandom.seed(635)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.4926903247833252,
            accuracy: 0.009853806495666504)
        XCTAssertEqual(
            a.sum().item(Float.self), 126.12872314453125,
            accuracy: 2.522574462890625)
        let result = LayerNorm(dimensions: 16)(a)[.ellipsis, 0]
        XCTAssertEqual(result.shape, [2, 8])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.2909903824329376,
            accuracy: 0.005819807648658752)
        XCTAssertEqual(
            result.sum().item(Float.self), 4.655846118927002,
            accuracy: 0.09311692237854004)
    }

    func testRMSNorm() {
        MLXRandom.seed(103)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.5054763555526733,
            accuracy: 0.010109527111053467)
        XCTAssertEqual(
            a.sum().item(Float.self), 129.40194702148438,
            accuracy: 2.5880389404296875)
        let result = RMSNorm(dimensions: 16)(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.8729387521743774,
            accuracy: 0.01745877504348755)
        XCTAssertEqual(
            result.sum().item(Float.self), 223.47232055664062,
            accuracy: 4.469446411132813)
    }

    func testGroupNorm() {
        MLXRandom.seed(855)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.48666587471961975,
            accuracy: 0.009733317494392395)
        XCTAssertEqual(
            a.sum().item(Float.self), 124.58646392822266,
            accuracy: 2.491729278564453)
        let result = GroupNorm(groupCount: 4, dimensions: 16)(a)[0, 0]
        XCTAssertEqual(result.shape, [16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), -0.054606519639492035,
            accuracy: -0.0010921303927898408)
        XCTAssertEqual(
            result.sum().item(Float.self), -0.8737043142318726,
            accuracy: -0.017474086284637452)
    }

    func testBatchNorm() {
        MLXRandom.seed(266)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.5058146715164185,
            accuracy: 0.010116293430328369)
        XCTAssertEqual(
            a.sum().item(Float.self), 129.48855590820312,
            accuracy: 2.5897711181640624)
        let result = BatchNorm(featureCount: 16)(a)[0, 0]
        XCTAssertEqual(result.shape, [16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.4397852420806885,
            accuracy: 0.00879570484161377)
        XCTAssertEqual(
            result.sum().item(Float.self), 7.036563873291016,
            accuracy: 0.14073127746582031)
    }

    func testRoPE() {
        MLXRandom.seed(71)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.5082664489746094,
            accuracy: 0.010165328979492188)
        XCTAssertEqual(
            a.sum().item(Float.self), 130.1162109375,
            accuracy: 2.60232421875)
        let result = RoPE(dimensions: 8)(a)
        XCTAssertEqual(result.shape, [2, 8, 16])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.4562537670135498,
            accuracy: 0.009125075340270997)
        XCTAssertEqual(
            result.sum().item(Float.self), 116.80096435546875,
            accuracy: 2.3360192871093752)
    }

    func testSinusoidalPositionalEncoding() {
        MLXRandom.seed(226)
        let a = MLXRandom.uniform(0.0 ..< 1.0, [2, 8, 16])
        XCTAssertEqual(a.shape, [2, 8, 16])
        XCTAssertEqual(a.dtype, .float32)
        XCTAssertEqual(
            a.mean().item(Float.self), 0.5026599168777466,
            accuracy: 0.010053198337554931)
        XCTAssertEqual(
            a.sum().item(Float.self), 128.68093872070312,
            accuracy: 2.5736187744140624)
        let result = SinusoidalPositionalEncoding(dimensions: 8)(a)
        XCTAssertEqual(result.shape, [2, 8, 16, 8])
        XCTAssertEqual(result.dtype, .float32)
        XCTAssertEqual(
            result.mean().item(Float.self), 0.2705308198928833,
            accuracy: 0.005410616397857666)
        XCTAssertEqual(
            result.sum().item(Float.self), 554.047119140625,
            accuracy: 11.0809423828125)
    }

}
